{
  "address": "0x50DaF90fc4570dF816e6A85a066fd0D375f209C0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNCAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_ASSET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TARGETCHAIN",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XCM_TRANSACTORV2_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XTOKENS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAddressToCurrencyId",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "",
          "type": "bytes2"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAddressToMinimumValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bifrostParaId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_BNCAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_bifrostParaId",
          "type": "uint32"
        },
        {
          "internalType": "bytes2",
          "name": "_nativeCurrencyId",
          "type": "bytes2"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mintVAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVNativeAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeCurrencyId",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "",
          "type": "bytes2"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "overallWeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vAssetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumValue",
          "type": "uint256"
        },
        {
          "internalType": "bytes2",
          "name": "currencyId",
          "type": "bytes2"
        }
      ],
      "name": "setAssetAddressInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint64",
          "name": "_xtokenWeight",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_transactRequiredWeightAtMost",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_overallWeight",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapAssetsForExactNativeAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapNativeAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactRequiredWeightAtMost",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xcmTransactorDestination",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "parents",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xtokenWeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6c6885d85aca82fac825aab66c952fd79cb9c4de36cf67e1f2f96dd073450070",
  "receipt": {
    "to": null,
    "from": "0x573394b77fC17F91E9E67F147A9ECe24d67C5073",
    "contractAddress": "0x50DaF90fc4570dF816e6A85a066fd0D375f209C0",
    "transactionIndex": 0,
    "gasUsed": "2273261",
    "logsBloom": "0x
    "blockHash": "0xba0764510a61a0eb0cd77ff71ffaabcd54a660e6494fac5f9fdf36baf0c27116",
    "transactionHash": "0x6c6885d85aca82fac825aab66c952fd79cb9c4de36cf67e1f2f96dd073450070",
    "logs": [],
    "blockNumber": 33,
    "cumulativeGasUsed": "2273261",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "7d3d40590162c17cf0cbd73fca48ee0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TARGETCHAIN\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XCM_TRANSACTORV2_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XTOKENS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAddressToCurrencyId\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAddressToMinimumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bifrostParaId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BNCAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_bifrostParaId\",\"type\":\"uint32\"},{\"internalType\":\"bytes2\",\"name\":\"_nativeCurrencyId\",\"type\":\"bytes2\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mintVAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeCurrencyId\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"overallWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumValue\",\"type\":\"uint256\"},{\"internalType\":\"bytes2\",\"name\":\"currencyId\",\"type\":\"bytes2\"}],\"name\":\"setAssetAddressInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint64\",\"name\":\"_xtokenWeight\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_transactRequiredWeightAtMost\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_overallWeight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapAssetsForExactNativeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapNativeAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactRequiredWeightAtMost\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xcmTransactorDestination\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"parents\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xtokenWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintVAsset(address,uint256)\":{\"notice\":\"Minted vAssets\"},\"mintVNativeAsset()\":{\"notice\":\"Minted vNative assets such as vASTR, vGLMR, vMOVR\"},\"redeemAsset(address,uint256)\":{\"notice\":\"Redeem assets\"},\"swapAssetsForExactAssets(address,address,uint256,uint128)\":{\"notice\":\"Swap one asset for another\"},\"swapAssetsForExactNativeAssets(address,uint256,uint128)\":{\"notice\":\"Swap one asset for native asset\"},\"swapNativeAssetsForExactAssets(address,uint128)\":{\"notice\":\"Swap native asset for another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoonbeamSlpx.sol\":\"MoonbeamSlpx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/MoonbeamSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/XcmTransactorV2.sol\\\";\\nimport \\\"./interfaces/Xtokens.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\ncontract MoonbeamSlpx is\\n    ISlpx,\\n    OwnableUpgradeable,\\n    PausableUpgradeable\\n{\\n    address public constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000802;\\n    address public constant XCM_TRANSACTORV2_ADDRESS =\\n        0x000000000000000000000000000000000000080D;\\n    address public constant XTOKENS =\\n        0x0000000000000000000000000000000000000804;\\n    bytes1 public constant TARGETCHAIN = 0x01;\\n\\n    uint64 public xtokenWeight;\\n    uint64 public transactRequiredWeightAtMost;\\n    uint64 public overallWeight;\\n    uint256 public feeAmount;\\n\\n    address public BNCAddress;\\n    uint32 public bifrostParaId;\\n    bytes2 public nativeCurrencyId;\\n\\n    XcmTransactorV2.Multilocation public xcmTransactorDestination;\\n\\n    mapping(address => bytes2) public assetAddressToCurrencyId;\\n    mapping(address => uint256) public assetAddressToMinimumValue;\\n\\n    function initialize(\\n        address _BNCAddress,\\n        uint32 _bifrostParaId,\\n        bytes2 _nativeCurrencyId\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        require(_BNCAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            _bifrostParaId == 2001 || _bifrostParaId == 2030,\\n            \\\"Invalid bifrostParaId\\\"\\n        );\\n        require(\\n            _nativeCurrencyId == 0x020a || _nativeCurrencyId == 0x0801,\\n            \\\"Invalid nativeCurrencyId\\\"\\n        );\\n        setFee(10000000000, 10000000000, 10000000000, 1000000000000);\\n        BNCAddress = _BNCAddress;\\n        bifrostParaId = _bifrostParaId;\\n        nativeCurrencyId = _nativeCurrencyId;\\n\\n        // Init xcmTransactorDestination\\n        bytes[] memory interior = new bytes[](1);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(_bifrostParaId));\\n        xcmTransactorDestination = XcmTransactorV2.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n    }\\n\\n    function setFee(\\n        uint64 _xtokenWeight,\\n        uint64 _transactRequiredWeightAtMost,\\n        uint64 _overallWeight,\\n        uint256 _feeAmount\\n    ) public onlyOwner {\\n        require(_xtokenWeight <= 10000000000, \\\"xtokenWeight too large\\\");\\n        require(\\n            _transactRequiredWeightAtMost <= 10000000000,\\n            \\\"transactRequiredWeightAtMost too large\\\"\\n        );\\n        require(_overallWeight <= 10000000000, \\\"OverallWeight too large\\\");\\n        require(_feeAmount <= 1000000000000, \\\"feeAmount too large\\\");\\n        xtokenWeight = _xtokenWeight;\\n        transactRequiredWeightAtMost = _transactRequiredWeightAtMost;\\n        overallWeight = _overallWeight;\\n        feeAmount = _feeAmount;\\n    }\\n\\n    function setAssetAddressInfo(\\n        address assetAddress,\\n        uint256 minimumValue,\\n        bytes2 currencyId\\n    ) public onlyOwner {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(minimumValue != 0, \\\"Invalid minimumValue\\\");\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        assetAddressToMinimumValue[assetAddress] = minimumValue;\\n        assetAddressToCurrencyId[assetAddress] = currencyId;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            assetAddressToMinimumValue[assetAddress] != 0,\\n            \\\"Not set MinimumValue\\\"\\n        );\\n        require(\\n            amount >= assetAddressToMinimumValue[assetAddress],\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        IERC20 asset = IERC20(assetAddress);\\n        asset.transferFrom(_msgSender(), address(this), amount);\\n        Xtokens(XTOKENS).transfer(\\n            assetAddress,\\n            amount,\\n            dest_account,\\n            xtokenWeight\\n        );\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            assetAddressToMinimumValue[NATIVE_ASSET_ADDRESS] != 0,\\n            \\\"Not set MinimumValue\\\"\\n        );\\n        require(\\n            amount >= assetAddressToMinimumValue[NATIVE_ASSET_ADDRESS],\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        Xtokens(XTOKENS).transfer(\\n            NATIVE_ASSET_ADDRESS,\\n            amount,\\n            dest_account,\\n            xtokenWeight\\n        );\\n    }\\n\\n    function mintVNativeAsset() external payable override whenNotPaused {\\n        // xtokens call\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            nativeCurrencyId,\\n            TARGETCHAIN\\n        );\\n        // XCM Transact\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Mint(_msgSender(), NATIVE_ASSET_ADDRESS, msg.value, callData);\\n    }\\n\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount\\n    ) external override whenNotPaused {\\n        bytes2 token = assetAddressToCurrencyId[assetAddress];\\n        require(token != bytes2(0), \\\"Invalid assetAddress\\\");\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            token,\\n            TARGETCHAIN\\n        );\\n        // XCM Transact\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Mint(_msgSender(), assetAddress, amount, callData);\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = assetAddressToCurrencyId[vAssetAddress];\\n        require(vtoken != bytes2(0), \\\"Invalid vAssetAddress\\\");\\n\\n        // xtokens call\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        // xcm transactor call\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            TARGETCHAIN\\n        );\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, callData);\\n    }\\n\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\\n        require(assetIn != bytes2(0) && assetOut != bytes2(0), \\\"Invalid asset\\\");\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        // xcm transactor call\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            assetOut,\\n            assetOutMin,\\n            TARGETCHAIN\\n        );\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            assetOutAddress,\\n            assetInAmount,\\n            assetOutMin,\\n            callData\\n        );\\n    }\\n\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\\n        require(assetIn != bytes2(0), \\\"Invalid assetIn\\\");\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        // xcm transactor call\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            nativeCurrencyId,\\n            assetOutMin,\\n            TARGETCHAIN\\n        );\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            NATIVE_ASSET_ADDRESS,\\n            assetInAmount,\\n            assetOutMin,\\n            callData\\n        );\\n    }\\n\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin\\n    ) external payable override whenNotPaused {\\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\\n        require(assetOut != bytes2(0), \\\"Invalid assetOut\\\");\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // xcm transactor call\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            nativeCurrencyId,\\n            assetOut,\\n            assetOutMin,\\n            TARGETCHAIN\\n        );\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            transactRequiredWeightAtMost,\\n            callData,\\n            feeAmount,\\n            overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            assetOutAddress,\\n            msg.value,\\n            assetOutMin,\\n            callData\\n        );\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal view returns (Xtokens.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(bifrostParaId));\\n        // AccountId32: { id: public_key , network: any }\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n\\n        return dest;\\n    }\\n}\\n\",\"keccak256\":\"0x3cacaee7eed70d1db9ac77fb7805600ed7c6c3afa56b18ecf8a835e065813d3d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\ninterface ISlpx {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        bytes callcode\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        bytes callcode\\n    );\\n    event Swap(\\n        address swapper,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        bytes callcode\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset() external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(address assetAddress, uint256 amount) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(address vAssetAddress, uint256 amount) external;\\n\\n    /// Swap one asset for another\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external;\\n\\n    /// Swap one asset for native asset\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external;\\n\\n    /// Swap native asset for another\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xde3a2bd6d9ce97e896155bb406a2e7f43078653215b86f7a063e30b9e63b6d81\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XcmTransactorV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @dev The XcmTransactorV2 contract's address.\\naddress constant XCM_TRANSACTOR_V2_ADDRESS = 0x000000000000000000000000000000000000080D;\\n\\n/// @dev The XcmTransactorV2 contract's instance.\\nXcmTransactorV2 constant XCM_TRANSACTOR_V2_CONTRACT = XcmTransactorV2(\\n    XCM_TRANSACTOR_V2_ADDRESS\\n);\\n\\n/// @author The Moonbeam Team\\n/// @title Xcm Transactor Interface\\n/// The interface through which solidity contracts will interact with xcm transactor pallet\\n/// @custom:address 0x000000000000000000000000000000000000080D\\ninterface XcmTransactorV2 {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    /// Get index of an account in xcm transactor\\n    /// @custom:selector 3fdc4f36\\n    /// @param index The index of which we want to retrieve the account\\n    /// @return owner The owner of the derivative index\\n    ///\\n    function indexToAccount(uint16 index) external view returns (address owner);\\n\\n    /// Get transact info of a multilocation\\n    /// @custom:selector b689e20c\\n    /// @param multilocation The location for which we want to know the transact info\\n    /// @return transactExtraWeight The extra weight involved in the XCM message of using derivative\\n    /// @return transactExtraWeightSigned The extra weight involved in the XCM message of using signed\\n    /// @return maxWeight Maximum allowed weight for a single message in dest\\n    ///\\n    function transactInfoWithSigned(\\n        Multilocation memory multilocation\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 transactExtraWeight,\\n            uint64 transactExtraWeightSigned,\\n            uint64 maxWeight\\n        );\\n\\n    /// Get fee per second charged in its reserve chain for an asset\\n    /// @custom:selector 906c9990\\n    /// @param multilocation The asset location for which we want to know the fee per second value\\n    /// @return feePerSecond The fee per second that the reserve chain charges for this asset\\n    ///\\n    function feePerSecond(\\n        Multilocation memory multilocation\\n    ) external view returns (uint256 feePerSecond);\\n\\n    /// Transact through XCM using fee based on its multilocation\\n    /// @custom:selector fe430475\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param feeAsset The asset in which we want to pay fees.\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    ///\\n    function transactThroughDerivativeMultilocation(\\n        uint8 transactor,\\n        uint16 index,\\n        Multilocation memory feeAsset,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its currency_id\\n    /// @custom:selector 185de2ae\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param currencyId Address of the currencyId of the asset to be used for fees\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughDerivative(\\n        uint8 transactor,\\n        uint16 index,\\n        address currencyId,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its multilocation through signed origins\\n    /// @custom:selector d7ab340c\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocation The asset multilocation that indentifies the fee payment currency\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSignedMultilocation(\\n        Multilocation memory dest,\\n        Multilocation memory feeLocation,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its erc20 address through signed origins\\n    /// @custom:selector b648f3fe\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocationAddress The ERC20 address of the token we want to use to pay for fees\\n    /// only callable if such an asset has been BRIDGED to our chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSigned(\\n        Multilocation memory dest,\\n        address feeLocationAddress,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x5214c94ab741470685fabc2583b97fb3b195f28f2446de51930ed289bb00aaad\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/Xtokens.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n/// @dev The Xtokens contract's address.\\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\\n\\n/// @dev The Xtokens contract's instance.\\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\\n\\n/// @author The Moonbeam Team\\n/// @title Xtokens Interface\\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\\n/// @custom:address 0x0000000000000000000000000000000000000804\\ninterface Xtokens {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    // A MultiAsset is defined by a multilocation and an amount\\n    struct MultiAsset {\\n        Multilocation location;\\n        uint256 amount;\\n    }\\n\\n    // A Currency is defined by address and the amount to be transferred\\n    struct Currency {\\n        address currencyAddress;\\n        uint256 amount;\\n    }\\n\\n    /// Transfer a token through XCM based on its currencyId\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b9f813ff\\n    function transfer(\\n        address currencyAddress,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its currencyId specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 3e506ef0\\n    function transferWithFee(\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b4f76f96\\n    function transferMultiasset(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 150c016a\\n    function transferMultiassetWithFee(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector ab946323\\n    function transferMultiCurrencies(\\n        Currency[] memory currencies,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its location specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param assets The assets we want to transfer, defined by their location and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector 797b45fd\\n    function transferMultiAssets(\\n        MultiAsset[] memory assets,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n}\\n\",\"keccak256\":\"0xa484966d2a90c298bd90a79c7fcb7dcd01d4ff02f6c1f57db35362e4f8f0977f\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0xfa01044cb7e521da112383416c0f7772eba453695dff7527c7baa8329282c9ab\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f7b7312aa9aa8c89ab5f67098b6e1014829e1acd62976f002b2d09ada2ff2fe\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), token, targetChain);\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 currency_out_min,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x2f5541f87c400a694b19da8d5354481f1a8d804b43bcd906aaea3b6e315d1abf\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612829806100206000396000f3fe6080604052600436106101c25760003560e01c80638456cb59116100f7578063b2a1150511610095578063e284db6611610064578063e284db6614610551578063eddc8b9114610564578063ef70a0671461057a578063f2fde38b1461059a57600080fd5b8063b2a11505146104b1578063c86093a8146104d1578063d7c274c01461050a578063de62305f1461052057600080fd5b80639097c25d116100d15780639097c25d1461042a57806394cb2e491461044a578063a11b003714610471578063adfc7c161461049157600080fd5b80638456cb59146103e15780638a6fa437146103f65780638da5cb5b1461040c57600080fd5b80634eb82d9f1161016457806369e154041161013e57806369e154041461038e5780636deea29c146103a45780636ef67f7f146103c4578063715018a6146103cc57600080fd5b80634eb82d9f1461031f5780635bbfef451461034b5780635c975abb1461036b57600080fd5b80633c75045e116101a05780633c75045e146102795780633d587204146102a95780633f4ba83a146102e85780634acedccb146102ff57600080fd5b80631aa51037146101c75780632ac7343d14610207578063374f00ff14610241575b600080fd5b3480156101d357600080fd5b506101f46101e23660046120b2565b609d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561021357600080fd5b5060995461022890600160c01b900460f01b81565b6040516001600160f01b031990911681526020016101fe565b34801561024d57600080fd5b50609954610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561028557600080fd5b506102286102943660046120b2565b609c6020526000908152604090205460f01b81565b3480156102b557600080fd5b506097546102d090600160801b90046001600160401b031681565b6040516001600160401b0390911681526020016101fe565b3480156102f457600080fd5b506102fd6105ba565b005b34801561030b57600080fd5b506102fd61031a3660046120eb565b6105cc565b34801561032b57600080fd5b50609a546103399060ff1681565b60405160ff90911681526020016101fe565b34801561035757600080fd5b506102fd61036636600461214e565b61079f565b34801561037757600080fd5b5060655460ff1660405190151581526020016101fe565b34801561039a57600080fd5b506101f460985481565b3480156103b057600080fd5b506102fd6103bf36600461219c565b610b00565b6102fd610cd2565b3480156103d857600080fd5b506102fd610e51565b3480156103ed57600080fd5b506102fd610e63565b34801561040257600080fd5b5061026161080281565b34801561041857600080fd5b506033546001600160a01b0316610261565b34801561043657600080fd5b506102fd6104453660046121dd565b610e73565b34801561045657600080fd5b506097546102d090600160401b90046001600160401b031681565b34801561047d57600080fd5b506097546102d0906001600160401b031681565b34801561049d57600080fd5b506102fd6104ac36600461222a565b61107b565b3480156104bd57600080fd5b506102fd6104cc36600461225d565b611174565b3480156104dd57600080fd5b506099546104f590600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016101fe565b34801561051657600080fd5b5061026161080481565b34801561052c57600080fd5b50610538600160f81b81565b6040516001600160f81b031990911681526020016101fe565b6102fd61055f366004612290565b611366565b34801561057057600080fd5b5061026161080d81565b34801561058657600080fd5b506102fd61059536600461219c565b611548565b3480156105a657600080fd5b506102fd6105b53660046120b2565b6116df565b6105c2611758565b6105ca6117b2565b565b6105d4611758565b6402540be400846001600160401b031611156106305760405162461bcd60e51b815260206004820152601660248201527578746f6b656e57656967687420746f6f206c6172676560501b60448201526064015b60405180910390fd5b6402540be400836001600160401b0316111561069d5760405162461bcd60e51b815260206004820152602660248201527f7472616e73616374526571756972656457656967687441744d6f737420746f6f604482015265206c6172676560d01b6064820152608401610627565b6402540be400826001600160401b031611156106fb5760405162461bcd60e51b815260206004820152601760248201527f4f766572616c6c57656967687420746f6f206c617267650000000000000000006044820152606401610627565b64e8d4a510008111156107465760405162461bcd60e51b8152602060048201526013602482015272666565416d6f756e7420746f6f206c6172676560681b6044820152606401610627565b609780546001600160401b03938416600160801b0267ffffffffffffffff60801b19958516600160401b026fffffffffffffffffffffffffffffffff199092169690941695909517949094179290921617909155609855565b600054610100900460ff16158080156107bf5750600054600160ff909116105b806107d95750303b1580156107d9575060005460ff166001145b61083c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610627565b6000805460ff19166001179055801561085f576000805461ff0019166101001790555b610867611804565b61086f611833565b6001600160a01b0384166108b75760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610627565b8263ffffffff166107d114806108d457508263ffffffff166107ee145b6109185760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189a599c9bdcdd14185c985259605a1b6044820152606401610627565b61010560f11b6001600160f01b031983161480610943575061080160f01b6001600160f01b03198316145b61098f5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206e617469766543757272656e6379496400000000000000006044820152606401610627565b6109aa6402540be400806402540be40064e8d4a510006105cc565b609980546001600160a01b0386166001600160c01b031990911617600160a01b63ffffffff8616021761ffff60c01b1916600160c01b60f085901c0217905560006001604051908082528060200260200182016040528015610a2057816020015b6060815260200190600190039081610a0b5790505b50604051600060208201526001600160e01b031960e087901b16602182015290915060250160405160208183030381529060405281600081518110610a6757610a676122d9565b602090810291909101810191909152604080518082019091526001808252818301849052609a805460ff19169091178155835191929091610aae91609b9190860190611f4d565b50905050508015610afa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050565b610b08611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b03198116610b735760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207641737365744164647265737360581b6044820152606401610627565b610b7d83836118a8565b60405163139bc42560e31b8152600090733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC57890639cde212890610bbf9033908690600160f81b906004016122ef565b600060405180830381865af4158015610bdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c049190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610c6593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b505050507f08289580fadd4da935641e6814bb9b5e9fc4cccdedcff6d35124fcb578695745610cbf3390565b858584604051610af194939291906125b9565b610cda611862565b610ce334611b19565b60995460405163d9bee3b360e01b8152600091733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC5789163d9bee3b391610d31913391600160c01b900460f01b90600160f81b906004016122ef565b600060405180830381865af4158015610d4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d769190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610dd793609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050507f30c99b8e9449992bd7616d2645b02ee0a2b6f229a45d6b56b686963ff0c53497610e313390565b6108023484604051610e4694939291906125b9565b60405180910390a150565b610e59611758565b6105ca6000611d02565b610e6b611758565b6105ca611d54565b610e7b611862565b6001600160a01b038085166000908152609c602052604080822054928616825290205460f091821b911b6001600160f01b0319821615801590610ec757506001600160f01b0319811615155b610f035760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a5908185cdcd95d609a1b6044820152606401610627565b610f0d86856118a8565b604051630daf27e360e01b8152600090733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC57890630daf27e390610f53903390879087908a90600160f81b906004016125f6565b600060405180830381865af4158015610f70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f989190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610ff993609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b15801561101357600080fd5b505af1158015611027573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e56646070156110533390565b888888888660405161106a96959493929190612643565b60405180910390a150505050505050565b611083611758565b6001600160a01b0383166110a95760405162461bcd60e51b815260040161062790612699565b816110ed5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e696d756d56616c756560601b6044820152606401610627565b6001600160f01b031981166111395760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610627565b6001600160a01b03929092166000908152609d6020908152604080832093909355609c905220805461ffff191660f09290921c919091179055565b61117c611862565b6001600160a01b0383166000908152609c602052604090205460f01b6001600160f01b031981166111e15760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b9b9b2ba24b760891b6044820152606401610627565b6111eb84846118a8565b609954604051630daf27e360e01b8152600091733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC57891630daf27e39161123e9133918791600160c01b90910460f01b908990600160f81b906004016125f6565b600060405180830381865af415801561125b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112839190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe936112e493609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b1580156112fe57600080fd5b505af1158015611312573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e566460701561133e3390565b8661080287878660405161135796959493929190612643565b60405180910390a15050505050565b61136e611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b031981166113d45760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185cdcd95d13dd5d60821b6044820152606401610627565b6113dd34611b19565b609954604051630daf27e360e01b8152600091733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC57891630daf27e39161142f913391600160c01b900460f01b9087908990600160f81b906004016125f6565b600060405180830381865af415801561144c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114749190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe936114d593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b1580156114ef57600080fd5b505af1158015611503573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e566460701561152f3390565b61080286348786604051610af196959493929190612643565b611550611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b031981166115935760405162461bcd60e51b815260040161062790612699565b61159d83836118a8565b60405163d9bee3b360e01b8152600090733311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC5789063d9bee3b3906115df9033908690600160f81b906004016122ef565b600060405180830381865af41580156115fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116249190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe9361168593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b15801561169f57600080fd5b505af11580156116b3573d6000803e3d6000fd5b505050507f30c99b8e9449992bd7616d2645b02ee0a2b6f229a45d6b56b686963ff0c53497610cbf3390565b6116e7611758565b6001600160a01b03811661174c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610627565b61175581611d02565b50565b6033546001600160a01b031633146105ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610627565b6117ba611d91565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1661182b5760405162461bcd60e51b8152600401610627906126c7565b6105ca611dda565b600054610100900460ff1661185a5760405162461bcd60e51b8152600401610627906126c7565b6105ca611e0a565b60655460ff16156105ca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610627565b6001600160a01b0382166118ce5760405162461bcd60e51b815260040161062790612699565b6001600160a01b0382166000908152609d602052604090205461192a5760405162461bcd60e51b81526020600482015260146024820152734e6f7420736574204d696e696d756d56616c756560601b6044820152606401610627565b6001600160a01b0382166000908152609d602052604090205481101561198b5760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610627565b6000738F8F6B104190a4A24CcFf7B4006Ea7A59baeAf816332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af41580156119ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a109190612712565b90506000611a1d82611e3d565b9050836001600160a01b0381166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa7919061272b565b5060975460405163b9f813ff60e01b81526108049163b9f813ff91611ae0918991899188916001600160401b039091169060040161274d565b600060405180830381600087803b158015611afa57600080fd5b505af1158015611b0e573d6000803e3d6000fd5b505050505050505050565b610802600052609d6020527f382c168b1823bf50cea41570e6d90d63d48929787d842e8f79781a20861398f654611b895760405162461bcd60e51b81526020600482015260146024820152734e6f7420736574204d696e696d756d56616c756560601b6044820152606401610627565b610802600052609d6020527f382c168b1823bf50cea41570e6d90d63d48929787d842e8f79781a20861398f654811015611bfe5760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610627565b6000738F8F6B104190a4A24CcFf7B4006Ea7A59baeAf816332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c839190612712565b90506000611c9082611e3d565b60975460405163b9f813ff60e01b81529192506108049163b9f813ff91611ccb9161080291889187916001600160401b03169060040161274d565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d5c611862565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117e73390565b60655460ff166105ca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610627565b600054610100900460ff16611e015760405162461bcd60e51b8152600401610627906126c7565b6105ca33611d02565b600054610100900460ff16611e315760405162461bcd60e51b8152600401610627906126c7565b6065805460ff19169055565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b6060815260200190600190039081611e6a5790505060995460405160006020820152600160a01b90910460e01b6001600160e01b031916602182015290915060250160405160208183030381529060405281600081518110611ece57611ece6122d9565b602002602001018190525082604051602001611f019190600160f81b815260018101919091526000602182015260220190565b60405160208183030381529060405281600181518110611f2357611f236122d9565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b828054828255906000526020600020908101928215611f9a579160200282015b82811115611f9a5782518051611f8a918491602090910190611faa565b5091602001919060010190611f6d565b50611fa692915061202a565b5090565b828054611fb6906123fc565b90600052602060002090601f016020900481019282611fd8576000855561201e565b82601f10611ff157805160ff191683800117855561201e565b8280016001018555821561201e579182015b8281111561201e578251825591602001919060010190612003565b50611fa6929150612047565b80821115611fa657600061203e828261205c565b5060010161202a565b5b80821115611fa65760008155600101612048565b508054612068906123fc565b6000825580601f10612078575050565b601f0160209004906000526020600020908101906117559190612047565b80356001600160a01b03811681146120ad57600080fd5b919050565b6000602082840312156120c457600080fd5b6120cd82612096565b9392505050565b80356001600160401b03811681146120ad57600080fd5b6000806000806080858703121561210157600080fd5b61210a856120d4565b9350612118602086016120d4565b9250612126604086016120d4565b9396929550929360600135925050565b80356001600160f01b0319811681146120ad57600080fd5b60008060006060848603121561216357600080fd5b61216c84612096565b9250602084013563ffffffff8116811461218557600080fd5b915061219360408501612136565b90509250925092565b600080604083850312156121af57600080fd5b6121b883612096565b946020939093013593505050565b80356001600160801b03811681146120ad57600080fd5b600080600080608085870312156121f357600080fd5b6121fc85612096565b935061220a60208601612096565b92506040850135915061221f606086016121c6565b905092959194509250565b60008060006060848603121561223f57600080fd5b61224884612096565b92506020840135915061219360408501612136565b60008060006060848603121561227257600080fd5b61227b84612096565b925060208401359150612193604085016121c6565b600080604083850312156122a357600080fd5b6122ac83612096565b91506122ba602084016121c6565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526001600160f01b03199190911660208301526001600160f81b031916604082015260600190565b60005b8381101561233f578181015183820152602001612327565b83811115610afa5750506000910152565b60006020828403121561236257600080fd5b81516001600160401b038082111561237957600080fd5b818401915084601f83011261238d57600080fd5b81518181111561239f5761239f6122c3565b604051601f8201601f19908116603f011681019083821181831017156123c7576123c76122c3565b816040528281528760208487010111156123e057600080fd5b6123f1836020830160208801612324565b979650505050505050565b600181811c9082168061241057607f821691505b6020821081141561243157634e487b7160e01b600052602260045260246000fd5b50919050565b6000815180845261244f816020860160208601612324565b601f01601f19169290920160200192915050565b60c081526000610100820160ff89541660c08401526001808a01604060e086015282815480855261012094508487019150848160051b8801019450600083815260209350838120815b8381101561255f5789880361011f190185528154839080891c898216806124d457607f821691505b8982108114156124f257634e487b7160e01b87526022600452602487fd5b818c5260208c0181801561250d576001811461251e57612548565b60ff19851682528b82019550612548565b600088815260209020895b8581101561254257815484820152908e01908d01612529565b83019650505b50939b5050509587019550509086019086016124ac565b50505050506125788186018b6001600160a01b03169052565b50506001600160401b0387166040840152828103606084015261259b8187612437565b9150508360808301526123f160a08301846001600160401b03169052565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125ec90830184612437565b9695505050505050565b6001600160a01b039590951685526001600160f01b031993841660208601529190921660408401526001600160801b0390911660608301526001600160f81b031916608082015260a00190565b6001600160a01b038781168252868116602083015285166040820152606081018490526001600160801b038316608082015260c060a0820181905260009061268d90830184612437565b98975050505050505050565b602080825260149082015273496e76616c69642061737365744164647265737360601b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561272457600080fd5b5051919050565b60006020828403121561273d57600080fd5b815180151581146120cd57600080fd5b60018060a01b03851681526000602085818401526080604084015260c0830160ff865116608085015281860151604060a086015281815180845260e08701915060e08160051b8801019350848301925060005b818110156127ce5760df198886030183526127bc858551612437565b945092850192918501916001016127a0565b5050506001600160401b03861660608601525091506127ea9050565b9594505050505056fea26469706673582212202d6daef2f3ca6bde92b1236564806f17e401171e6fa01d481ffb348b954a646d64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106101c25760003560e01c80638456cb59116100f7578063b2a1150511610095578063e284db6611610064578063e284db6614610551578063eddc8b9114610564578063ef70a0671461057a578063f2fde38b1461059a57600080fd5b8063b2a11505146104b1578063c86093a8146104d1578063d7c274c01461050a578063de62305f1461052057600080fd5b80639097c25d116100d15780639097c25d1461042a57806394cb2e491461044a578063a11b003714610471578063adfc7c161461049157600080fd5b80638456cb59146103e15780638a6fa437146103f65780638da5cb5b1461040c57600080fd5b80634eb82d9f1161016457806369e154041161013e57806369e154041461038e5780636deea29c146103a45780636ef67f7f146103c4578063715018a6146103cc57600080fd5b80634eb82d9f1461031f5780635bbfef451461034b5780635c975abb1461036b57600080fd5b80633c75045e116101a05780633c75045e146102795780633d587204146102a95780633f4ba83a146102e85780634acedccb146102ff57600080fd5b80631aa51037146101c75780632ac7343d14610207578063374f00ff14610241575b600080fd5b3480156101d357600080fd5b506101f46101e23660046120b2565b609d6020526000908152604090205481565b6040519081526020015b60405180910390f35b34801561021357600080fd5b5060995461022890600160c01b900460f01b81565b6040516001600160f01b031990911681526020016101fe565b34801561024d57600080fd5b50609954610261906001600160a01b031681565b6040516001600160a01b0390911681526020016101fe565b34801561028557600080fd5b506102286102943660046120b2565b609c6020526000908152604090205460f01b81565b3480156102b557600080fd5b506097546102d090600160801b90046001600160401b031681565b6040516001600160401b0390911681526020016101fe565b3480156102f457600080fd5b506102fd6105ba565b005b34801561030b57600080fd5b506102fd61031a3660046120eb565b6105cc565b34801561032b57600080fd5b50609a546103399060ff1681565b60405160ff90911681526020016101fe565b34801561035757600080fd5b506102fd61036636600461214e565b61079f565b34801561037757600080fd5b5060655460ff1660405190151581526020016101fe565b34801561039a57600080fd5b506101f460985481565b3480156103b057600080fd5b506102fd6103bf36600461219c565b610b00565b6102fd610cd2565b3480156103d857600080fd5b506102fd610e51565b3480156103ed57600080fd5b506102fd610e63565b34801561040257600080fd5b5061026161080281565b34801561041857600080fd5b506033546001600160a01b0316610261565b34801561043657600080fd5b506102fd6104453660046121dd565b610e73565b34801561045657600080fd5b506097546102d090600160401b90046001600160401b031681565b34801561047d57600080fd5b506097546102d0906001600160401b031681565b34801561049d57600080fd5b506102fd6104ac36600461222a565b61107b565b3480156104bd57600080fd5b506102fd6104cc36600461225d565b611174565b3480156104dd57600080fd5b506099546104f590600160a01b900463ffffffff1681565b60405163ffffffff90911681526020016101fe565b34801561051657600080fd5b5061026161080481565b34801561052c57600080fd5b50610538600160f81b81565b6040516001600160f81b031990911681526020016101fe565b6102fd61055f366004612290565b611366565b34801561057057600080fd5b5061026161080d81565b34801561058657600080fd5b506102fd61059536600461219c565b611548565b3480156105a657600080fd5b506102fd6105b53660046120b2565b6116df565b6105c2611758565b6105ca6117b2565b565b6105d4611758565b6402540be400846001600160401b031611156106305760405162461bcd60e51b815260206004820152601660248201527578746f6b656e57656967687420746f6f206c6172676560501b60448201526064015b60405180910390fd5b6402540be400836001600160401b0316111561069d5760405162461bcd60e51b815260206004820152602660248201527f7472616e73616374526571756972656457656967687441744d6f737420746f6f604482015265206c6172676560d01b6064820152608401610627565b6402540be400826001600160401b031611156106fb5760405162461bcd60e51b815260206004820152601760248201527f4f766572616c6c57656967687420746f6f206c617267650000000000000000006044820152606401610627565b64e8d4a510008111156107465760405162461bcd60e51b8152602060048201526013602482015272666565416d6f756e7420746f6f206c6172676560681b6044820152606401610627565b609780546001600160401b03938416600160801b0267ffffffffffffffff60801b19958516600160401b026fffffffffffffffffffffffffffffffff199092169690941695909517949094179290921617909155609855565b600054610100900460ff16158080156107bf5750600054600160ff909116105b806107d95750303b1580156107d9575060005460ff166001145b61083c5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610627565b6000805460ff19166001179055801561085f576000805461ff0019166101001790555b610867611804565b61086f611833565b6001600160a01b0384166108b75760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610627565b8263ffffffff166107d114806108d457508263ffffffff166107ee145b6109185760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189a599c9bdcdd14185c985259605a1b6044820152606401610627565b61010560f11b6001600160f01b031983161480610943575061080160f01b6001600160f01b03198316145b61098f5760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206e617469766543757272656e6379496400000000000000006044820152606401610627565b6109aa6402540be400806402540be40064e8d4a510006105cc565b609980546001600160a01b0386166001600160c01b031990911617600160a01b63ffffffff8616021761ffff60c01b1916600160c01b60f085901c0217905560006001604051908082528060200260200182016040528015610a2057816020015b6060815260200190600190039081610a0b5790505b50604051600060208201526001600160e01b031960e087901b16602182015290915060250160405160208183030381529060405281600081518110610a6757610a676122d9565b602090810291909101810191909152604080518082019091526001808252818301849052609a805460ff19169091178155835191929091610aae91609b9190860190611f4d565b50905050508015610afa576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498906020015b60405180910390a15b50505050565b610b08611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b03198116610b735760405162461bcd60e51b8152602060048201526015602482015274496e76616c6964207641737365744164647265737360581b6044820152606401610627565b610b7d83836118a8565b60405163139bc42560e31b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90639cde212890610bbf9033908690600160f81b906004016122ef565b600060405180830381865af4158015610bdc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c049190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610c6593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b158015610c7f57600080fd5b505af1158015610c93573d6000803e3d6000fd5b505050507f08289580fadd4da935641e6814bb9b5e9fc4cccdedcff6d35124fcb578695745610cbf3390565b858584604051610af194939291906125b9565b610cda611862565b610ce334611b19565b60995460405163d9bee3b360e01b815260009173__$e184f4046250cd750dfdb139628ab13bdc$__9163d9bee3b391610d31913391600160c01b900460f01b90600160f81b906004016122ef565b600060405180830381865af4158015610d4e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d769190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610dd793609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b158015610df157600080fd5b505af1158015610e05573d6000803e3d6000fd5b505050507f30c99b8e9449992bd7616d2645b02ee0a2b6f229a45d6b56b686963ff0c53497610e313390565b6108023484604051610e4694939291906125b9565b60405180910390a150565b610e59611758565b6105ca6000611d02565b610e6b611758565b6105ca611d54565b610e7b611862565b6001600160a01b038085166000908152609c602052604080822054928616825290205460f091821b911b6001600160f01b0319821615801590610ec757506001600160f01b0319811615155b610f035760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a5908185cdcd95d609a1b6044820152606401610627565b610f0d86856118a8565b604051630daf27e360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90630daf27e390610f53903390879087908a90600160f81b906004016125f6565b600060405180830381865af4158015610f70573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f989190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe93610ff993609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b15801561101357600080fd5b505af1158015611027573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e56646070156110533390565b888888888660405161106a96959493929190612643565b60405180910390a150505050505050565b611083611758565b6001600160a01b0383166110a95760405162461bcd60e51b815260040161062790612699565b816110ed5760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e696d756d56616c756560601b6044820152606401610627565b6001600160f01b031981166111395760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610627565b6001600160a01b03929092166000908152609d6020908152604080832093909355609c905220805461ffff191660f09290921c919091179055565b61117c611862565b6001600160a01b0383166000908152609c602052604090205460f01b6001600160f01b031981166111e15760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b9b9b2ba24b760891b6044820152606401610627565b6111eb84846118a8565b609954604051630daf27e360e01b815260009173__$e184f4046250cd750dfdb139628ab13bdc$__91630daf27e39161123e9133918791600160c01b90910460f01b908990600160f81b906004016125f6565b600060405180830381865af415801561125b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112839190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe936112e493609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b1580156112fe57600080fd5b505af1158015611312573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e566460701561133e3390565b8661080287878660405161135796959493929190612643565b60405180910390a15050505050565b61136e611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b031981166113d45760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185cdcd95d13dd5d60821b6044820152606401610627565b6113dd34611b19565b609954604051630daf27e360e01b815260009173__$e184f4046250cd750dfdb139628ab13bdc$__91630daf27e39161142f913391600160c01b900460f01b9087908990600160f81b906004016125f6565b600060405180830381865af415801561144c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114749190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe936114d593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b1580156114ef57600080fd5b505af1158015611503573d6000803e3d6000fd5b505050507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e566460701561152f3390565b61080286348786604051610af196959493929190612643565b611550611862565b6001600160a01b0382166000908152609c602052604090205460f01b6001600160f01b031981166115935760405162461bcd60e51b815260040161062790612699565b61159d83836118a8565b60405163d9bee3b360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__9063d9bee3b3906115df9033908690600160f81b906004016122ef565b600060405180830381865af41580156115fc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116249190810190612350565b609954609754609854604051635b2479ff60e11b815293945061080d9363b648f3fe9361168593609a936001600160a01b0392909216926001600160401b03600160401b83048116938a939092600160801b90910490911690600401612463565b600060405180830381600087803b15801561169f57600080fd5b505af11580156116b3573d6000803e3d6000fd5b505050507f30c99b8e9449992bd7616d2645b02ee0a2b6f229a45d6b56b686963ff0c53497610cbf3390565b6116e7611758565b6001600160a01b03811661174c5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610627565b61175581611d02565b50565b6033546001600160a01b031633146105ca5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610627565b6117ba611d91565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff1661182b5760405162461bcd60e51b8152600401610627906126c7565b6105ca611dda565b600054610100900460ff1661185a5760405162461bcd60e51b8152600401610627906126c7565b6105ca611e0a565b60655460ff16156105ca5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610627565b6001600160a01b0382166118ce5760405162461bcd60e51b815260040161062790612699565b6001600160a01b0382166000908152609d602052604090205461192a5760405162461bcd60e51b81526020600482015260146024820152734e6f7420736574204d696e696d756d56616c756560601b6044820152606401610627565b6001600160a01b0382166000908152609d602052604090205481101561198b5760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610627565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af41580156119ec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a109190612712565b90506000611a1d82611e3d565b9050836001600160a01b0381166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015611a83573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa7919061272b565b5060975460405163b9f813ff60e01b81526108049163b9f813ff91611ae0918991899188916001600160401b039091169060040161274d565b600060405180830381600087803b158015611afa57600080fd5b505af1158015611b0e573d6000803e3d6000fd5b505050505050505050565b610802600052609d6020527f382c168b1823bf50cea41570e6d90d63d48929787d842e8f79781a20861398f654611b895760405162461bcd60e51b81526020600482015260146024820152734e6f7420736574204d696e696d756d56616c756560601b6044820152606401610627565b610802600052609d6020527f382c168b1823bf50cea41570e6d90d63d48929787d842e8f79781a20861398f654811015611bfe5760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610627565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611c5f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c839190612712565b90506000611c9082611e3d565b60975460405163b9f813ff60e01b81529192506108049163b9f813ff91611ccb9161080291889187916001600160401b03169060040161274d565b600060405180830381600087803b158015611ce557600080fd5b505af1158015611cf9573d6000803e3d6000fd5b50505050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611d5c611862565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117e73390565b60655460ff166105ca5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610627565b600054610100900460ff16611e015760405162461bcd60e51b8152600401610627906126c7565b6105ca33611d02565b600054610100900460ff16611e315760405162461bcd60e51b8152600401610627906126c7565b6065805460ff19169055565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b6060815260200190600190039081611e6a5790505060995460405160006020820152600160a01b90910460e01b6001600160e01b031916602182015290915060250160405160208183030381529060405281600081518110611ece57611ece6122d9565b602002602001018190525082604051602001611f019190600160f81b815260018101919091526000602182015260220190565b60405160208183030381529060405281600181518110611f2357611f236122d9565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b828054828255906000526020600020908101928215611f9a579160200282015b82811115611f9a5782518051611f8a918491602090910190611faa565b5091602001919060010190611f6d565b50611fa692915061202a565b5090565b828054611fb6906123fc565b90600052602060002090601f016020900481019282611fd8576000855561201e565b82601f10611ff157805160ff191683800117855561201e565b8280016001018555821561201e579182015b8281111561201e578251825591602001919060010190612003565b50611fa6929150612047565b80821115611fa657600061203e828261205c565b5060010161202a565b5b80821115611fa65760008155600101612048565b508054612068906123fc565b6000825580601f10612078575050565b601f0160209004906000526020600020908101906117559190612047565b80356001600160a01b03811681146120ad57600080fd5b919050565b6000602082840312156120c457600080fd5b6120cd82612096565b9392505050565b80356001600160401b03811681146120ad57600080fd5b6000806000806080858703121561210157600080fd5b61210a856120d4565b9350612118602086016120d4565b9250612126604086016120d4565b9396929550929360600135925050565b80356001600160f01b0319811681146120ad57600080fd5b60008060006060848603121561216357600080fd5b61216c84612096565b9250602084013563ffffffff8116811461218557600080fd5b915061219360408501612136565b90509250925092565b600080604083850312156121af57600080fd5b6121b883612096565b946020939093013593505050565b80356001600160801b03811681146120ad57600080fd5b600080600080608085870312156121f357600080fd5b6121fc85612096565b935061220a60208601612096565b92506040850135915061221f606086016121c6565b905092959194509250565b60008060006060848603121561223f57600080fd5b61224884612096565b92506020840135915061219360408501612136565b60008060006060848603121561227257600080fd5b61227b84612096565b925060208401359150612193604085016121c6565b600080604083850312156122a357600080fd5b6122ac83612096565b91506122ba602084016121c6565b90509250929050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b039390931683526001600160f01b03199190911660208301526001600160f81b031916604082015260600190565b60005b8381101561233f578181015183820152602001612327565b83811115610afa5750506000910152565b60006020828403121561236257600080fd5b81516001600160401b038082111561237957600080fd5b818401915084601f83011261238d57600080fd5b81518181111561239f5761239f6122c3565b604051601f8201601f19908116603f011681019083821181831017156123c7576123c76122c3565b816040528281528760208487010111156123e057600080fd5b6123f1836020830160208801612324565b979650505050505050565b600181811c9082168061241057607f821691505b6020821081141561243157634e487b7160e01b600052602260045260246000fd5b50919050565b6000815180845261244f816020860160208601612324565b601f01601f19169290920160200192915050565b60c081526000610100820160ff89541660c08401526001808a01604060e086015282815480855261012094508487019150848160051b8801019450600083815260209350838120815b8381101561255f5789880361011f190185528154839080891c898216806124d457607f821691505b8982108114156124f257634e487b7160e01b87526022600452602487fd5b818c5260208c0181801561250d576001811461251e57612548565b60ff19851682528b82019550612548565b600088815260209020895b8581101561254257815484820152908e01908d01612529565b83019650505b50939b5050509587019550509086019086016124ac565b50505050506125788186018b6001600160a01b03169052565b50506001600160401b0387166040840152828103606084015261259b8187612437565b9150508360808301526123f160a08301846001600160401b03169052565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906125ec90830184612437565b9695505050505050565b6001600160a01b039590951685526001600160f01b031993841660208601529190921660408401526001600160801b0390911660608301526001600160f81b031916608082015260a00190565b6001600160a01b038781168252868116602083015285166040820152606081018490526001600160801b038316608082015260c060a0820181905260009061268d90830184612437565b98975050505050505050565b602080825260149082015273496e76616c69642061737365744164647265737360601b604082015260600190565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b60006020828403121561272457600080fd5b5051919050565b60006020828403121561273d57600080fd5b815180151581146120cd57600080fd5b60018060a01b03851681526000602085818401526080604084015260c0830160ff865116608085015281860151604060a086015281815180845260e08701915060e08160051b8801019350848301925060005b818110156127ce5760df198886030183526127bc858551612437565b945092850192918501916001016127a0565b5050506001600160401b03861660608601525091506127ea9050565b9594505050505056fea26469706673582212202d6daef2f3ca6bde92b1236564806f17e401171e6fa01d481ffb348b954a646d64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0x8F8F6B104190a4A24CcFf7B4006Ea7A59baeAf81",
    "BuildCallData": "0x3311A4609cdD0C7Ce8D2Dfa592BA4aDD23FeC578"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintVAsset(address,uint256)": {
        "notice": "Minted vAssets"
      },
      "mintVNativeAsset()": {
        "notice": "Minted vNative assets such as vASTR, vGLMR, vMOVR"
      },
      "redeemAsset(address,uint256)": {
        "notice": "Redeem assets"
      },
      "swapAssetsForExactAssets(address,address,uint256,uint128)": {
        "notice": "Swap one asset for another"
      },
      "swapAssetsForExactNativeAssets(address,uint256,uint128)": {
        "notice": "Swap one asset for native asset"
      },
      "swapNativeAssetsForExactAssets(address,uint128)": {
        "notice": "Swap native asset for another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 798,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1610,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "xtokenWeight",
        "offset": 0,
        "slot": "151",
        "type": "t_uint64"
      },
      {
        "astId": 1612,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "transactRequiredWeightAtMost",
        "offset": 8,
        "slot": "151",
        "type": "t_uint64"
      },
      {
        "astId": 1614,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "overallWeight",
        "offset": 16,
        "slot": "151",
        "type": "t_uint64"
      },
      {
        "astId": 1616,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "feeAmount",
        "offset": 0,
        "slot": "152",
        "type": "t_uint256"
      },
      {
        "astId": 1618,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "BNCAddress",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 1620,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "bifrostParaId",
        "offset": 20,
        "slot": "153",
        "type": "t_uint32"
      },
      {
        "astId": 1622,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "nativeCurrencyId",
        "offset": 24,
        "slot": "153",
        "type": "t_bytes2"
      },
      {
        "astId": 1625,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "xcmTransactorDestination",
        "offset": 0,
        "slot": "154",
        "type": "t_struct(Multilocation)2649_storage"
      },
      {
        "astId": 1629,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "assetAddressToCurrencyId",
        "offset": 0,
        "slot": "156",
        "type": "t_mapping(t_address,t_bytes2)"
      },
      {
        "astId": 1633,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "assetAddressToMinimumValue",
        "offset": 0,
        "slot": "157",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes2": {
        "encoding": "inplace",
        "label": "bytes2",
        "numberOfBytes": "2"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bytes2)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes2)",
        "numberOfBytes": "32",
        "value": "t_bytes2"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Multilocation)2649_storage": {
        "encoding": "inplace",
        "label": "struct XcmTransactorV2.Multilocation",
        "members": [
          {
            "astId": 2645,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "parents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2648,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "interior",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}