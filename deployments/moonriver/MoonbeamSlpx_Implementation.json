{
  "address": "0x0e13c5327914929b62A1809F62ad044C4be0A29D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "remark",
          "type": "string"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "minDy",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "StablePoolSwap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNCAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToAssetInfo",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "currencyId",
          "type": "bytes2"
        },
        {
          "internalType": "uint256",
          "name": "operationalMin",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bifrostParaId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_BNCAddress",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_bifrostParaId",
          "type": "uint32"
        },
        {
          "internalType": "bytes2",
          "name": "_nativeCurrencyId",
          "type": "bytes2"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "remark",
          "type": "string"
        }
      ],
      "name": "mintVAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "remark",
          "type": "string"
        }
      ],
      "name": "mintVNativeAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MoonbeamSlpx.Operation",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "operationToFeeInfo",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "transactRequiredWeightAtMost",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "overallWeight",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vAssetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "redeemAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes2",
          "name": "currencyId",
          "type": "bytes2"
        },
        {
          "internalType": "uint256",
          "name": "minimumValue",
          "type": "uint256"
        }
      ],
      "name": "setAssetAddressInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum MoonbeamSlpx.Operation",
          "name": "_operation",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_transactRequiredWeightAtMost",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_overallWeight",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "_feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setOperationToFeeInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "poolId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "minDy",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "stablePoolSwap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapAssetsForExactNativeAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "swapNativeAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x8829d66460c84c00680e49668fff4e9ff56dc94caa49c920bc074f9cd82c5585",
  "receipt": {
    "to": null,
    "from": "0x4597C97a43dFBb4a398E2b16AA9cE61f90d801DD",
    "contractAddress": "0x0e13c5327914929b62A1809F62ad044C4be0A29D",
    "transactionIndex": 0,
    "gasUsed": "2577078",
    "logsBloom": "0x
    "blockHash": "0xd27164e45385ba0a4f4bf3191f7e02ef4e825a416bde2b6ffa05aa5f2e01b185",
    "transactionHash": "0x8829d66460c84c00680e49668fff4e9ff56dc94caa49c920bc074f9cd82c5585",
    "logs": [],
    "blockNumber": 5435914,
    "cumulativeGasUsed": "2577078",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "78ccdc394f323f274fe9010af2604bd5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"minDy\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"StablePoolSwap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNCAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToAssetInfo\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"currencyId\",\"type\":\"bytes2\"},{\"internalType\":\"uint256\",\"name\":\"operationalMin\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bifrostParaId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_BNCAddress\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_bifrostParaId\",\"type\":\"uint32\"},{\"internalType\":\"bytes2\",\"name\":\"_nativeCurrencyId\",\"type\":\"bytes2\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"mintVAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"remark\",\"type\":\"string\"}],\"name\":\"mintVNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoonbeamSlpx.Operation\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"operationToFeeInfo\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"transactRequiredWeightAtMost\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"overallWeight\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"redeemAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"currencyId\",\"type\":\"bytes2\"},{\"internalType\":\"uint256\",\"name\":\"minimumValue\",\"type\":\"uint256\"}],\"name\":\"setAssetAddressInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum MoonbeamSlpx.Operation\",\"name\":\"_operation\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_transactRequiredWeightAtMost\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_overallWeight\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"_feeAmount\",\"type\":\"uint256\"}],\"name\":\"setOperationToFeeInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"poolId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"minDy\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"stablePoolSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapAssetsForExactNativeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"swapNativeAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintVAsset(address,uint256,address,string)\":{\"notice\":\"Minted vAssets\"},\"mintVNativeAsset(address,string)\":{\"notice\":\"Minted vNative assets such as vASTR, vGLMR, vMOVR\"},\"redeemAsset(address,uint256,address)\":{\"notice\":\"Redeem assets\"},\"swapAssetsForExactAssets(address,address,uint256,uint128,address)\":{\"notice\":\"Swap one asset for another\"},\"swapAssetsForExactNativeAssets(address,uint256,uint128,address)\":{\"notice\":\"Swap one asset for native asset\"},\"swapNativeAssetsForExactAssets(address,uint128,address)\":{\"notice\":\"Swap native asset for another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MoonbeamSlpx.sol\":\"MoonbeamSlpx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/MoonbeamSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./interfaces/XcmTransactorV2.sol\\\";\\nimport \\\"./interfaces/Xtokens.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\n\\ncontract MoonbeamSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\\n    address internal constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000802;\\n    address internal constant XCM_TRANSACTORV2_ADDRESS =\\n        0x000000000000000000000000000000000000080D;\\n    address internal constant XTOKENS =\\n        0x0000000000000000000000000000000000000804;\\n    bytes1 internal constant MOONBEAM_CHAIN = 0x01;\\n\\n    XcmTransactorV2.Multilocation internal xcmTransactorDestination;\\n\\n    address public BNCAddress;\\n    uint32 public bifrostParaId;\\n\\n    enum Operation {\\n        Mint,\\n        Redeem,\\n        ZenlinkSwap,\\n        StableSwap\\n    }\\n\\n    struct AssetInfo {\\n        bytes2 currencyId;\\n        uint256 operationalMin;\\n    }\\n\\n    struct FeeInfo {\\n        uint64 transactRequiredWeightAtMost;\\n        uint256 feeAmount;\\n        uint64 overallWeight;\\n    }\\n\\n    mapping(address => AssetInfo) public addressToAssetInfo;\\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\\n\\n    function checkAssetIsExist(\\n        address assetAddress\\n    ) internal view returns (bytes2) {\\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\\n        require(assetInfo.operationalMin > 0, \\\"Asset is not exist\\\");\\n        require(assetInfo.currencyId != bytes2(0), \\\"Invalid asset\\\");\\n        return assetInfo.currencyId;\\n    }\\n\\n    function checkFeeInfo(\\n        Operation operation\\n    ) internal view returns (FeeInfo memory) {\\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\\n        require(\\n            feeInfo.transactRequiredWeightAtMost > 0,\\n            \\\"Invalid transactRequiredWeightAtMost\\\"\\n        );\\n        require(feeInfo.feeAmount > 0, \\\"Invalid feeAmount\\\");\\n        require(feeInfo.overallWeight > 0, \\\"Invalid overallWeight\\\");\\n        return feeInfo;\\n    }\\n\\n    function initialize(\\n        address _BNCAddress,\\n        uint32 _bifrostParaId,\\n        bytes2 _nativeCurrencyId\\n    ) public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        require(_BNCAddress != address(0), \\\"Invalid address\\\");\\n        require(\\n            _bifrostParaId == 2001 || _bifrostParaId == 2030,\\n            \\\"Invalid bifrostParaId\\\"\\n        );\\n        require(\\n            _nativeCurrencyId == 0x020a || _nativeCurrencyId == 0x0801,\\n            \\\"Invalid nativeCurrencyId\\\"\\n        );\\n\\n        setAssetAddressInfo(_BNCAddress, 0x0001, 1_000_000_000_000);\\n        setAssetAddressInfo(\\n            NATIVE_ASSET_ADDRESS,\\n            _nativeCurrencyId,\\n            1_000_000_000_000_000_000\\n        );\\n\\n        BNCAddress = _BNCAddress;\\n        bifrostParaId = _bifrostParaId;\\n\\n        // Init xcmTransactorDestination\\n        bytes[] memory interior = new bytes[](1);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(_bifrostParaId));\\n        xcmTransactorDestination = XcmTransactorV2.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n    }\\n\\n    function setOperationToFeeInfo(\\n        Operation _operation,\\n        uint64 _transactRequiredWeightAtMost,\\n        uint64 _overallWeight,\\n        uint256 _feeAmount\\n    ) public onlyOwner {\\n        require(\\n            _transactRequiredWeightAtMost <= 10000000000,\\n            \\\"transactRequiredWeightAtMost too large\\\"\\n        );\\n        require(_feeAmount <= 1000000000000, \\\"feeAmount too large\\\");\\n        require(_overallWeight <= 10000000000, \\\"OverallWeight too large\\\");\\n        operationToFeeInfo[_operation] = FeeInfo(\\n            _transactRequiredWeightAtMost,\\n            _feeAmount,\\n            _overallWeight\\n        );\\n    }\\n\\n    function setAssetAddressInfo(\\n        address assetAddress,\\n        bytes2 currencyId,\\n        uint256 minimumValue\\n    ) public onlyOwner {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(minimumValue != 0, \\\"Invalid minimumValue\\\");\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\\n        assetInfo.currencyId = currencyId;\\n        assetInfo.operationalMin = minimumValue;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        IERC20 asset = IERC20(assetAddress);\\n        asset.transferFrom(_msgSender(), address(this), amount);\\n        Xtokens(XTOKENS).transfer(\\n            assetAddress,\\n            amount,\\n            dest_account,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n\\n        Xtokens.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        Xtokens(XTOKENS).transfer(\\n            NATIVE_ASSET_ADDRESS,\\n            amount,\\n            dest_account,\\n            type(uint64).max\\n        );\\n    }\\n\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n        // xtokens call\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        // Build bifrost xcm-action mint call data\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark\\n        );\\n        // XCM Transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\\n    }\\n\\n    function stablePoolSwap(\\n        uint32 poolId,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 minDy,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = checkAssetIsExist(assetInAddress);\\n        bytes2 assetOut = checkAssetIsExist(assetOutAddress);\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildStablePoolSwapCallBytes(\\n            _msgSender(),\\n            poolId,\\n            assetIn,\\n            assetOut,\\n            minDy,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.StableSwap);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit StablePoolSwap(\\n            _msgSender(),\\n            poolId,\\n            assetInAddress,\\n            assetOutAddress,\\n            assetInAmount,\\n            minDy,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = checkAssetIsExist(assetInAddress);\\n        bytes2 assetOut = checkAssetIsExist(assetOutAddress);\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            assetOut,\\n            assetOutMin,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            assetOutAddress,\\n            assetInAmount,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = checkAssetIsExist(assetInAddress);\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            nativeToken,\\n            assetOutMin,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            NATIVE_ASSET_ADDRESS,\\n            assetInAmount,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external payable override whenNotPaused {\\n        bytes2 assetOut = checkAssetIsExist(assetOutAddress);\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        // xcm transactor call\\n        bytes memory targetChain = abi.encodePacked(MOONBEAM_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            assetOut,\\n            assetOutMin,\\n            targetChain\\n        );\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        XcmTransactorV2(XCM_TRANSACTORV2_ADDRESS).transactThroughSigned(\\n            xcmTransactorDestination,\\n            BNCAddress,\\n            feeInfo.transactRequiredWeightAtMost,\\n            callData,\\n            feeInfo.feeAmount,\\n            feeInfo.overallWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            assetOutAddress,\\n            msg.value,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal view returns (Xtokens.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(bifrostParaId));\\n        // AccountId32: { id: public_key , network: any }\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        Xtokens.Multilocation memory dest = Xtokens.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n\\n        return dest;\\n    }\\n}\\n\",\"keccak256\":\"0x4e56730f8b12894db0512960c56c91b71fbbac5a2d6e418768b547e6e7bbb19e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface ISlpx {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode,\\n        string remark\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode\\n    );\\n    event Swap(\\n        address swapper,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver,\\n        bytes callcode\\n    );\\n\\n    event StablePoolSwap(\\n        address swapper,\\n        uint32 poolId,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 minDy,\\n        address receiver,\\n        bytes callcode\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external;\\n\\n    /// Swap one asset for another\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external;\\n\\n    /// Swap one asset for native asset\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external;\\n\\n    /// Swap native asset for another\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external payable;\\n\\n    function stablePoolSwap(\\n        uint32 poolId,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 minDy,\\n        address receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0447ab0ad78b51b3037cd93d37df9fb446f820459246c717645454572083a50e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XcmTransactorV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/// @dev The XcmTransactorV2 contract's address.\\naddress constant XCM_TRANSACTOR_V2_ADDRESS = 0x000000000000000000000000000000000000080D;\\n\\n/// @dev The XcmTransactorV2 contract's instance.\\nXcmTransactorV2 constant XCM_TRANSACTOR_V2_CONTRACT = XcmTransactorV2(\\n    XCM_TRANSACTOR_V2_ADDRESS\\n);\\n\\n/// @author The Moonbeam Team\\n/// @title Xcm Transactor Interface\\n/// The interface through which solidity contracts will interact with xcm transactor pallet\\n/// @custom:address 0x000000000000000000000000000000000000080D\\ninterface XcmTransactorV2 {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    /// Get index of an account in xcm transactor\\n    /// @custom:selector 3fdc4f36\\n    /// @param index The index of which we want to retrieve the account\\n    /// @return owner The owner of the derivative index\\n    ///\\n    function indexToAccount(uint16 index) external view returns (address owner);\\n\\n    /// Get transact info of a multilocation\\n    /// @custom:selector b689e20c\\n    /// @param multilocation The location for which we want to know the transact info\\n    /// @return transactExtraWeight The extra weight involved in the XCM message of using derivative\\n    /// @return transactExtraWeightSigned The extra weight involved in the XCM message of using signed\\n    /// @return maxWeight Maximum allowed weight for a single message in dest\\n    ///\\n    function transactInfoWithSigned(\\n        Multilocation memory multilocation\\n    )\\n        external\\n        view\\n        returns (\\n            uint64 transactExtraWeight,\\n            uint64 transactExtraWeightSigned,\\n            uint64 maxWeight\\n        );\\n\\n    /// Get fee per second charged in its reserve chain for an asset\\n    /// @custom:selector 906c9990\\n    /// @param multilocation The asset location for which we want to know the fee per second value\\n    /// @return feePerSecond The fee per second that the reserve chain charges for this asset\\n    ///\\n    function feePerSecond(\\n        Multilocation memory multilocation\\n    ) external view returns (uint256 feePerSecond);\\n\\n    /// Transact through XCM using fee based on its multilocation\\n    /// @custom:selector fe430475\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param feeAsset The asset in which we want to pay fees.\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    ///\\n    function transactThroughDerivativeMultilocation(\\n        uint8 transactor,\\n        uint16 index,\\n        Multilocation memory feeAsset,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its currency_id\\n    /// @custom:selector 185de2ae\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param transactor The transactor to be used\\n    /// @param index The index to be used\\n    /// @param currencyId Address of the currencyId of the asset to be used for fees\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain\\n    /// @param innerCall The inner call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughDerivative(\\n        uint8 transactor,\\n        uint16 index,\\n        address currencyId,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory innerCall,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its multilocation through signed origins\\n    /// @custom:selector d7ab340c\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocation The asset multilocation that indentifies the fee payment currency\\n    /// It has to be a reserve of the destination chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSignedMultilocation(\\n        Multilocation memory dest,\\n        Multilocation memory feeLocation,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n\\n    /// Transact through XCM using fee based on its erc20 address through signed origins\\n    /// @custom:selector b648f3fe\\n    /// @dev No token is burnt before sending the message. The caller must ensure the destination\\n    /// is able to undertand the DescendOrigin message, and create a unique account from which\\n    /// dispatch the call\\n    /// @param dest The destination chain (as multilocation) where to send the message\\n    /// @param feeLocationAddress The ERC20 address of the token we want to use to pay for fees\\n    /// only callable if such an asset has been BRIDGED to our chain\\n    /// @param transactRequiredWeightAtMost The weight we want to buy in the destination chain for the call to be made\\n    /// @param call The call to be executed in the destination chain\\n    /// @param feeAmount Amount to be used as fee.\\n    /// @param overallWeight Overall weight to be used for the xcm message.\\n    function transactThroughSigned(\\n        Multilocation memory dest,\\n        address feeLocationAddress,\\n        uint64 transactRequiredWeightAtMost,\\n        bytes memory call,\\n        uint256 feeAmount,\\n        uint64 overallWeight\\n    ) external;\\n}\\n\",\"keccak256\":\"0xb92f4611172a662795c62e46049e8a99c032dfc8bfbf65307e3de9a9141d48e4\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/Xtokens.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/// @dev The Xtokens contract's address.\\naddress constant XTOKENS_ADDRESS = 0x0000000000000000000000000000000000000804;\\n\\n/// @dev The Xtokens contract's instance.\\nXtokens constant XTOKENS_CONTRACT = Xtokens(XTOKENS_ADDRESS);\\n\\n/// @author The Moonbeam Team\\n/// @title Xtokens Interface\\n/// @dev The interface through which solidity contracts will interact with xtokens pallet\\n/// @custom:address 0x0000000000000000000000000000000000000804\\ninterface Xtokens {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    // A MultiAsset is defined by a multilocation and an amount\\n    struct MultiAsset {\\n        Multilocation location;\\n        uint256 amount;\\n    }\\n\\n    // A Currency is defined by address and the amount to be transferred\\n    struct Currency {\\n        address currencyAddress;\\n        uint256 amount;\\n    }\\n\\n    /// Transfer a token through XCM based on its currencyId\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b9f813ff\\n    function transfer(\\n        address currencyAddress,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its currencyId specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 3e506ef0\\n    function transferWithFee(\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector b4f76f96\\n    function transferMultiasset(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param destination The weight we want to buy in the destination chain\\n    /// @custom:selector 150c016a\\n    function transferMultiassetWithFee(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector ab946323\\n    function transferMultiCurrencies(\\n        Currency[] memory currencies,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n\\n    /// Transfer several tokens at once through XCM based on its location specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param assets The assets we want to transfer, defined by their location and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain\\n    /// @custom:selector 797b45fd\\n    function transferMultiAssets(\\n        MultiAsset[] memory assets,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        uint64 weight\\n    ) external;\\n}\\n\",\"keccak256\":\"0x84818cdfbb1b9d94e2ce93443028383d2e7e560ab4716f1c127a1278cf07e50c\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0x2a5dd8e6b32dfaf911e5d1b26a25dae4d489b4e16052659077f9f59d34da9ad2\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x196399822da1125151480ae7b85587fae83c6a59e81d6673eb68465e7a4d9304\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n    uint8 public constant STABLE_POOL_SWAP_CALL_INDEX = 3;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark)\\n            );\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 currency_out_min,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildStablePoolSwapCallBytes(\\n        address caller,\\n        uint32 pool_id,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 min_dy,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(STABLE_POOL_SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint32(pool_id),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(min_dy),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint32(uint32 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function toTruncBytes(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        uint len = 0;\\n        for (uint i = 0; i < 8; i++) {\\n            uint8 temp = uint8(x / (2 ** (8 * i)));\\n            if (temp != 0) {\\n                b[i] = bytes1(temp);\\n            } else {\\n                len = i;\\n                break;\\n            }\\n        }\\n        bytes memory rst = new bytes(len);\\n        for (uint i = 0; i < len; i++) {\\n            rst[i] = b[i];\\n        }\\n        return rst;\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromScaleChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return 48 + c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"z\\\")) {\\n            return 97 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"Z\\\")) {\\n            return 65 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        revert(\\\"fail\\\");\\n    }\\n\\n    // encode the string to bytes\\n    // following the scale format\\n    // format: len + content\\n    // a-z: 61->87\\n    // A-Z: 41->57\\n    // 0-9: 30->40\\n    function toScaleString(\\n        string memory s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        bytes memory len = toTruncBytes(uint64(ss.length * 4));\\n        bytes memory content = new bytes(ss.length);\\n        for (uint i = 0; i < ss.length; ++i) {\\n            content[i] = bytes1(fromScaleChar(uint8(ss[i])));\\n        }\\n        bytes memory rst = bytes.concat(len, content);\\n        return rst;\\n    }\\n}\\n\",\"keccak256\":\"0xf338fd01a9f7c3677949ad54f3ad65294d27944c62c4af0cf4b44b5933ed90eb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50612da6806100206000396000f3fe60806040526004361061011f5760003560e01c806362c64fe1116100a0578063bddef61a11610064578063bddef61a146102e9578063c86093a81461035a578063c864545614610393578063d6aa374d146103ee578063f2fde38b1461040e57600080fd5b806362c64fe11461026e578063715018a6146102815780638456cb591461029657806386c64bb2146102ab5780638da5cb5b146102cb57600080fd5b80634972a921116100e75780634972a921146101cb57806352b11006146101eb5780635bbfef451461020b5780635c975abb1461022b5780635ede28821461024e57600080fd5b806323e498791461012457806324af044714610139578063374f00ff146101595780633f4ba83a146101965780634899b9a8146101ab575b600080fd5b6101376101323660046122b9565b61042e565b005b34801561014557600080fd5b506101376101543660046123bf565b6105f1565b34801561016557600080fd5b50609954610179906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a257600080fd5b506101376107d7565b3480156101b757600080fd5b506101376101c6366004612426565b6107e9565b3480156101d757600080fd5b506101376101e636600461246d565b610993565b3480156101f757600080fd5b506101376102063660046124f2565b610b5a565b34801561021757600080fd5b5061013761022636600461252e565b610c72565b34801561023757600080fd5b5060655460ff16604051901515815260200161018d565b34801561025a57600080fd5b50610137610269366004612568565b610fc0565b61013761027c3660046125c6565b611182565b34801561028d57600080fd5b50610137611376565b3480156102a257600080fd5b50610137611388565b3480156102b757600080fd5b506101376102c6366004612639565b611398565b3480156102d757600080fd5b506033546001600160a01b0316610179565b3480156102f557600080fd5b50610330610304366004612684565b609b602052600090815260409020805460018201546002909201546001600160401b0391821692911683565b604080516001600160401b039485168152602081019390935292169181019190915260600161018d565b34801561036657600080fd5b5060995461037e90600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161018d565b34801561039f57600080fd5b506103ce6103ae3660046126a6565b609a602052600090815260409020805460019091015460f09190911b9082565b604080516001600160f01b0319909316835260208301919091520161018d565b3480156103fa57600080fd5b506101376104093660046126c1565b611560565b34801561041a57600080fd5b506101376104293660046126a6565b611725565b61043661179e565b6000610441846117e4565b905060006104506108026117e4565b905061045b346118b3565b60405160009061047590600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa63cb070de56104a93390565b85878a876040518663ffffffff1660e01b81526004016104cd959493929190612792565b600060405180830381865af41580156104ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051291908101906127e8565b905060006105206002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe9461056a946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6105c43390565b6108028a348b8b886040516105df97969594939291906129ef565b60405180910390a15050505050505050565b6105f961179e565b6020815111156106425760405162461bcd60e51b815260206004820152600f60248201526e72656d61726b20746f6f206c6f6e6760881b60448201526064015b60405180910390fd5b600061064d856117e4565b90506106598585611baf565b60405160009061067390600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa63b92155276106a73390565b8585886040518563ffffffff1660e01b81526004016106c99493929190612a4e565b600060405180830381865af41580156106e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070e91908101906127e8565b9050600061071c6000611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610766946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561078057600080fd5b505af1158015610794573d6000803e3d6000fd5b505050507fca31869d7c65b3930a575eef33c6f69db06b0f1168af96408c4fceca8de0fadc6107c03390565b898989868a6040516105df96959493929190612a94565b6107df611de8565b6107e7611e42565b565b6107f161179e565b60006107fc846117e4565b90506108088484611baf565b60405160009061082290600160f81b90859060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa639f0047836108563390565b85856040518463ffffffff1660e01b815260040161087693929190612ae1565b600060405180830381865af4158015610893573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108bb91908101906127e8565b905060006108c96001611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610913946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050507f89996e9f85ecc9022265638d75df5de89dd421fab215e1b013ece5fcc188adce61096d3390565b88888886604051610982959493929190612b15565b60405180910390a150505050505050565b61099b61179e565b60006109a6866117e4565b905060006109b3866117e4565b90506109bf8786611baf565b6040516000906109d990600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa636bc6c67f610a0d3390565b8c87878b886040518763ffffffff1660e01b8152600401610a3396959493929190612b50565b600060405180830381865af4158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7891908101906127e8565b90506000610a866003611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610ad0946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b505050507ff9a157c40f0a1b19376934e7c611456abb1d51640748e1a86602391e13d96af5610b2a3390565b8c8c8c8c8c8c89604051610b45989796959493929190612bb3565b60405180910390a15050505050505050505050565b610b62611de8565b6001600160a01b038316610baf5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610639565b80610bf35760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e696d756d56616c756560601b6044820152606401610639565b6001600160f01b03198216610c3f5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610639565b6001600160a01b03929092166000908152609a60205260409020805461ffff191660f09290921c91909117815560010155565b600054610100900460ff1615808015610c925750600054600160ff909116105b80610cac5750303b158015610cac575060005460ff166001145b610d0f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610639565b6000805460ff191660011790558015610d32576000805461ff0019166101001790555b610d3a611e94565b610d42611ec3565b6001600160a01b038416610d8a5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610639565b8263ffffffff166107d11480610da757508263ffffffff166107ee145b610deb5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189a599c9bdcdd14185c985259605a1b6044820152606401610639565b61010560f11b6001600160f01b031983161480610e16575061080160f01b6001600160f01b03198316145b610e625760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206e617469766543757272656e6379496400000000000000006044820152606401610639565b610e7684600160f01b64e8d4a51000610b5a565b610e8b61080283670de0b6b3a7640000610b5a565b609980546001600160a01b0386166001600160c01b031990911617600160a01b63ffffffff861602179055604080516001808252818301909252600091816020015b6060815260200190600190039081610ecd57905050604051600060208201526001600160e01b031960e087901b16602182015290915060250160405160208183030381529060405281600081518110610f2857610f28612c21565b6020908102919091018101919091526040805180820190915260018082528183018490526097805460ff19169091178155835191929091610f6f916098919086019061213d565b50905050508015610fba576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610fc861179e565b6000610fd3866117e4565b90506000610fe0866117e4565b9050610fec8786611baf565b60405160009061100690600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa63cb070de561103a3390565b86868a876040518663ffffffff1660e01b815260040161105e959493929190612792565b600060405180830381865af415801561107b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a391908101906127e8565b905060006110b16002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe946110fb946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561111557600080fd5b505af1158015611129573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6111553390565b8b8b8b8b8b8860405161116e97969594939291906129ef565b60405180910390a150505050505050505050565b61118a61179e565b6020815111156111ce5760405162461bcd60e51b815260206004820152600f60248201526e72656d61726b20746f6f206c6f6e6760881b6044820152606401610639565b60006111db6108026117e4565b90506111e6346118b3565b60405160009061120090600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa63b92155276112343390565b8585886040518563ffffffff1660e01b81526004016112569493929190612a4e565b600060405180830381865af4158015611273573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129b91908101906127e8565b905060006112a96000611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe946112f3946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b505050507fca31869d7c65b3930a575eef33c6f69db06b0f1168af96408c4fceca8de0fadc61134d3390565b6108023489868a60405161136696959493929190612a94565b60405180910390a1505050505050565b61137e611de8565b6107e76000611ef2565b611390611de8565b6107e7611f44565b6113a0611de8565b6402540be400836001600160401b0316111561140d5760405162461bcd60e51b815260206004820152602660248201527f7472616e73616374526571756972656457656967687441744d6f737420746f6f604482015265206c6172676560d01b6064820152608401610639565b64e8d4a510008111156114585760405162461bcd60e51b8152602060048201526013602482015272666565416d6f756e7420746f6f206c6172676560681b6044820152606401610639565b6402540be400826001600160401b031611156114b65760405162461bcd60e51b815260206004820152601760248201527f4f766572616c6c57656967687420746f6f206c617267650000000000000000006044820152606401610639565b6040518060600160405280846001600160401b03168152602001828152602001836001600160401b0316815250609b60008660038111156114f9576114f9612c37565b600381111561150a5761150a612c37565b81526020808201929092526040908101600020835181546001600160401b0391821667ffffffffffffffff1991821617835593850151600183015593909101516002909101805491909316911617905550505050565b61156861179e565b6000611573856117e4565b905060006115826108026117e4565b905061158e8686611baf565b6040516000906115a890600160f81b90869060200161270e565b60405160208183030381529060405290506000734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa63cb070de56115dc3390565b86868a876040518663ffffffff1660e01b8152600401611600959493929190612792565b600060405180830381865af415801561161d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261164591908101906127e8565b905060006116536002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe9461169d946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6116f73390565b8a6108028b8b8b8860405161171297969594939291906129ef565b60405180910390a1505050505050505050565b61172d611de8565b6001600160a01b0381166117925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610639565b61179b81611ef2565b50565b60655460ff16156107e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610639565b6001600160a01b0381166000908152609a602090815260408083208151808301909252805460f01b6001600160f01b031916825260010154918101829052906118645760405162461bcd60e51b8152602060048201526012602482015271105cdcd95d081a5cc81b9bdd08195e1a5cdd60721b6044820152606401610639565b80516001600160f01b0319166118ac5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a5908185cdcd95d609a1b6044820152606401610639565b5192915050565b610802600052609a6020527fae00947ee313780ebd51d12b4f1ecb575ce4eb6b099d8cff17facd5b92da71f0548110156119285760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610639565b6000737746ef546d562b443AE4B4145541a3b1a3D757176332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190612c4d565b905060006119ba82611f81565b60405163b9f813ff60e01b81529091506108049063b9f813ff906119f19061080290879086906001600160401b0390600401612c66565b600060405180830381600087803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b50505050505050565b6040805160608101825260008082526020820181905291810182905290609b81846003811115611a5a57611a5a612c37565b6003811115611a6b57611a6b612c37565b81526020808201929092526040908101600020815160608101835281546001600160401b03908116808352600184015495830195909552600290920154909116918101919091529150611b0c5760405162461bcd60e51b8152602060048201526024808201527f496e76616c6964207472616e7361637452657175697265645765696768744174604482015263135bdcdd60e21b6064820152608401610639565b6000816020015111611b545760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908199959505b5bdd5b9d607a1b6044820152606401610639565b600081604001516001600160401b031611611ba95760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081bdd995c985b1b15d95a59da1d605a1b6044820152606401610639565b92915050565b6001600160a01b038216611bfc5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610639565b6001600160a01b0382166000908152609a6020526040902060010154811015611c605760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610639565b6000737746ef546d562b443AE4B4145541a3b1a3D757176332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612c4d565b90506000611cf282611f81565b9050836001600160a01b0381166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612d03565b5060405163b9f813ff60e01b81526108049063b9f813ff90611daf908890889087906001600160401b0390600401612c66565b600060405180830381600087803b158015611dc957600080fd5b505af1158015611ddd573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b031633146107e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610639565b611e4a612091565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16611ebb5760405162461bcd60e51b815260040161063990612d25565b6107e76120da565b600054610100900460ff16611eea5760405162461bcd60e51b815260040161063990612d25565b6107e761210a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611f4c61179e565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e773390565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b6060815260200190600190039081611fae5790505060995460405160006020820152600160a01b90910460e01b6001600160e01b03191660218201529091506025016040516020818303038152906040528160008151811061201257612012612c21565b6020026020010181905250826040516020016120459190600160f81b815260018101919091526000602182015260220190565b6040516020818303038152906040528160018151811061206757612067612c21565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b60655460ff166107e75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610639565b600054610100900460ff166121015760405162461bcd60e51b815260040161063990612d25565b6107e733611ef2565b600054610100900460ff166121315760405162461bcd60e51b815260040161063990612d25565b6065805460ff19169055565b82805482825590600052602060002090810192821561218a579160200282015b8281111561218a578251805161217a91849160209091019061219a565b509160200191906001019061215d565b5061219692915061221a565b5090565b8280546121a69061285e565b90600052602060002090601f0160209004810192826121c8576000855561220e565b82601f106121e157805160ff191683800117855561220e565b8280016001018555821561220e579182015b8281111561220e5782518255916020019190600101906121f3565b50612196929150612237565b8082111561219657600061222e828261224c565b5060010161221a565b5b808211156121965760008155600101612238565b5080546122589061285e565b6000825580601f10612268575050565b601f01602090049060005260206000209081019061179b9190612237565b80356001600160a01b038116811461229d57600080fd5b919050565b80356001600160801b038116811461229d57600080fd5b6000806000606084860312156122ce57600080fd5b6122d784612286565b92506122e5602085016122a2565b91506122f360408501612286565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561233a5761233a6122fc565b604052919050565b60006001600160401b0382111561235b5761235b6122fc565b50601f01601f191660200190565b600082601f83011261237a57600080fd5b813561238d61238882612342565b612312565b8181528460208386010111156123a257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156123d557600080fd5b6123de85612286565b9350602085013592506123f360408601612286565b915060608501356001600160401b0381111561240e57600080fd5b61241a87828801612369565b91505092959194509250565b60008060006060848603121561243b57600080fd5b61244484612286565b9250602084013591506122f360408501612286565b803563ffffffff8116811461229d57600080fd5b60008060008060008060c0878903121561248657600080fd5b61248f87612459565b955061249d60208801612286565b94506124ab60408801612286565b9350606087013592506124c0608088016122a2565b91506124ce60a08801612286565b90509295509295509295565b80356001600160f01b03198116811461229d57600080fd5b60008060006060848603121561250757600080fd5b61251084612286565b925061251e602085016124da565b9150604084013590509250925092565b60008060006060848603121561254357600080fd5b61254c84612286565b925061255a60208501612459565b91506122f3604085016124da565b600080600080600060a0868803121561258057600080fd5b61258986612286565b945061259760208701612286565b9350604086013592506125ac606087016122a2565b91506125ba60808701612286565b90509295509295909350565b600080604083850312156125d957600080fd5b6125e283612286565b915060208301356001600160401b038111156125fd57600080fd5b61260985828601612369565b9150509250929050565b80356004811061229d57600080fd5b80356001600160401b038116811461229d57600080fd5b6000806000806080858703121561264f57600080fd5b61265885612613565b935061266660208601612622565b925061267460408601612622565b9396929550929360600135925050565b60006020828403121561269657600080fd5b61269f82612613565b9392505050565b6000602082840312156126b857600080fd5b61269f82612286565b600080600080608085870312156126d757600080fd5b6126e085612286565b9350602085013592506126f5604086016122a2565b915061270360608601612286565b905092959194509250565b6001600160f81b031992909216825260601b6bffffffffffffffffffffffff1916600182015260150190565b60005b8381101561275557818101518382015260200161273d565b83811115610fba5750506000910152565b6000815180845261277e81602086016020860161273a565b601f01601f19169290920160200192915050565b6001600160a01b03861681526001600160f01b03198581166020830152841660408201526001600160801b038316606082015260a0608082018190526000906127dd90830184612766565b979650505050505050565b6000602082840312156127fa57600080fd5b81516001600160401b0381111561281057600080fd5b8201601f8101841361282157600080fd5b805161282f61238882612342565b81815285602083850101111561284457600080fd5b61285582602083016020860161273a565b95945050505050565b600181811c9082168061287257607f821691505b6020821081141561289357634e487b7160e01b600052602260045260246000fd5b50919050565b60c081526000610100820160ff89541660c08401526001808a01604060e086015282815480855261012094508487019150848160051b8801019450600083815260209350838120815b838110156129955789880361011f190185528154839080891c8982168061290a57607f821691505b89821081141561292857634e487b7160e01b87526022600452602487fd5b818c5260208c0181801561294357600181146129545761297e565b60ff19851682528b8201955061297e565b600088815260209020895b8581101561297857815484820152908e01908d0161295f565b83019650505b50939b5050509587019550509086019086016128e2565b50505050506129ae8186018b6001600160a01b03169052565b50506001600160401b038716604084015282810360608401526129d18187612766565b9150508360808301526127dd60a08301846001600160401b03169052565b6001600160a01b03888116825287811660208301528681166040830152606082018690526001600160801b0385166080830152831660a082015260e060c08201819052600090612a4190830184612766565b9998505050505050505050565b6001600160a01b03851681526001600160f01b031984166020820152608060408201819052600090612a8290830185612766565b82810360608401526127dd8185612766565b6001600160a01b0387811682528681166020830152604082018690528416606082015260c060808201819052600090612acf90830185612766565b82810360a0840152612a418185612766565b6001600160a01b03841681526001600160f01b03198316602082015260606040820181905260009061285590830184612766565b6001600160a01b0386811682528581166020830152604082018590528316606082015260a0608082018190526000906127dd90830184612766565b6001600160a01b038716815263ffffffff861660208201526001600160f01b03198581166040830152841660608201526001600160801b038316608082015260c060a08201819052600090612ba790830184612766565b98975050505050505050565b6001600160a01b03898116825263ffffffff8916602083015287811660408301528681166060830152608082018690526001600160801b03851660a0830152831660c082015261010060e08201819052600090612c1283820185612766565b9b9a5050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215612c5f57600080fd5b5051919050565b60018060a01b03851681526000602085818401526080604084015260c0830160ff865116608085015281860151604060a086015281815180845260e08701915060e08160051b8801019350848301925060005b81811015612ce75760df19888603018352612cd5858551612766565b94509285019291850191600101612cb9565b5050506001600160401b03861660608601525091506128559050565b600060208284031215612d1557600080fd5b8151801515811461269f57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f45ac93c229a5b1f8499bb5de4f1f8f837b178cbbeaf63149d59f9b8e84a182e64736f6c634300080a0033",
  "deployedBytecode": "0x60806040526004361061011f5760003560e01c806362c64fe1116100a0578063bddef61a11610064578063bddef61a146102e9578063c86093a81461035a578063c864545614610393578063d6aa374d146103ee578063f2fde38b1461040e57600080fd5b806362c64fe11461026e578063715018a6146102815780638456cb591461029657806386c64bb2146102ab5780638da5cb5b146102cb57600080fd5b80634972a921116100e75780634972a921146101cb57806352b11006146101eb5780635bbfef451461020b5780635c975abb1461022b5780635ede28821461024e57600080fd5b806323e498791461012457806324af044714610139578063374f00ff146101595780633f4ba83a146101965780634899b9a8146101ab575b600080fd5b6101376101323660046122b9565b61042e565b005b34801561014557600080fd5b506101376101543660046123bf565b6105f1565b34801561016557600080fd5b50609954610179906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156101a257600080fd5b506101376107d7565b3480156101b757600080fd5b506101376101c6366004612426565b6107e9565b3480156101d757600080fd5b506101376101e636600461246d565b610993565b3480156101f757600080fd5b506101376102063660046124f2565b610b5a565b34801561021757600080fd5b5061013761022636600461252e565b610c72565b34801561023757600080fd5b5060655460ff16604051901515815260200161018d565b34801561025a57600080fd5b50610137610269366004612568565b610fc0565b61013761027c3660046125c6565b611182565b34801561028d57600080fd5b50610137611376565b3480156102a257600080fd5b50610137611388565b3480156102b757600080fd5b506101376102c6366004612639565b611398565b3480156102d757600080fd5b506033546001600160a01b0316610179565b3480156102f557600080fd5b50610330610304366004612684565b609b602052600090815260409020805460018201546002909201546001600160401b0391821692911683565b604080516001600160401b039485168152602081019390935292169181019190915260600161018d565b34801561036657600080fd5b5060995461037e90600160a01b900463ffffffff1681565b60405163ffffffff909116815260200161018d565b34801561039f57600080fd5b506103ce6103ae3660046126a6565b609a602052600090815260409020805460019091015460f09190911b9082565b604080516001600160f01b0319909316835260208301919091520161018d565b3480156103fa57600080fd5b506101376104093660046126c1565b611560565b34801561041a57600080fd5b506101376104293660046126a6565b611725565b61043661179e565b6000610441846117e4565b905060006104506108026117e4565b905061045b346118b3565b60405160009061047590600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__63cb070de56104a93390565b85878a876040518663ffffffff1660e01b81526004016104cd959493929190612792565b600060405180830381865af41580156104ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051291908101906127e8565b905060006105206002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe9461056a946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6105c43390565b6108028a348b8b886040516105df97969594939291906129ef565b60405180910390a15050505050505050565b6105f961179e565b6020815111156106425760405162461bcd60e51b815260206004820152600f60248201526e72656d61726b20746f6f206c6f6e6760881b60448201526064015b60405180910390fd5b600061064d856117e4565b90506106598585611baf565b60405160009061067390600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__63b92155276106a73390565b8585886040518563ffffffff1660e01b81526004016106c99493929190612a4e565b600060405180830381865af41580156106e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261070e91908101906127e8565b9050600061071c6000611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610766946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561078057600080fd5b505af1158015610794573d6000803e3d6000fd5b505050507fca31869d7c65b3930a575eef33c6f69db06b0f1168af96408c4fceca8de0fadc6107c03390565b898989868a6040516105df96959493929190612a94565b6107df611de8565b6107e7611e42565b565b6107f161179e565b60006107fc846117e4565b90506108088484611baf565b60405160009061082290600160f81b90859060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__639f0047836108563390565b85856040518463ffffffff1660e01b815260040161087693929190612ae1565b600060405180830381865af4158015610893573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108bb91908101906127e8565b905060006108c96001611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610913946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561092d57600080fd5b505af1158015610941573d6000803e3d6000fd5b505050507f89996e9f85ecc9022265638d75df5de89dd421fab215e1b013ece5fcc188adce61096d3390565b88888886604051610982959493929190612b15565b60405180910390a150505050505050565b61099b61179e565b60006109a6866117e4565b905060006109b3866117e4565b90506109bf8786611baf565b6040516000906109d990600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__636bc6c67f610a0d3390565b8c87878b886040518763ffffffff1660e01b8152600401610a3396959493929190612b50565b600060405180830381865af4158015610a50573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a7891908101906127e8565b90506000610a866003611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe94610ad0946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b158015610aea57600080fd5b505af1158015610afe573d6000803e3d6000fd5b505050507ff9a157c40f0a1b19376934e7c611456abb1d51640748e1a86602391e13d96af5610b2a3390565b8c8c8c8c8c8c89604051610b45989796959493929190612bb3565b60405180910390a15050505050505050505050565b610b62611de8565b6001600160a01b038316610baf5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610639565b80610bf35760405162461bcd60e51b8152602060048201526014602482015273496e76616c6964206d696e696d756d56616c756560601b6044820152606401610639565b6001600160f01b03198216610c3f5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610639565b6001600160a01b03929092166000908152609a60205260409020805461ffff191660f09290921c91909117815560010155565b600054610100900460ff1615808015610c925750600054600160ff909116105b80610cac5750303b158015610cac575060005460ff166001145b610d0f5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610639565b6000805460ff191660011790558015610d32576000805461ff0019166101001790555b610d3a611e94565b610d42611ec3565b6001600160a01b038416610d8a5760405162461bcd60e51b815260206004820152600f60248201526e496e76616c6964206164647265737360881b6044820152606401610639565b8263ffffffff166107d11480610da757508263ffffffff166107ee145b610deb5760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a5908189a599c9bdcdd14185c985259605a1b6044820152606401610639565b61010560f11b6001600160f01b031983161480610e16575061080160f01b6001600160f01b03198316145b610e625760405162461bcd60e51b815260206004820152601860248201527f496e76616c6964206e617469766543757272656e6379496400000000000000006044820152606401610639565b610e7684600160f01b64e8d4a51000610b5a565b610e8b61080283670de0b6b3a7640000610b5a565b609980546001600160a01b0386166001600160c01b031990911617600160a01b63ffffffff861602179055604080516001808252818301909252600091816020015b6060815260200190600190039081610ecd57905050604051600060208201526001600160e01b031960e087901b16602182015290915060250160405160208183030381529060405281600081518110610f2857610f28612c21565b6020908102919091018101919091526040805180820190915260018082528183018490526097805460ff19169091178155835191929091610f6f916098919086019061213d565b50905050508015610fba576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b50505050565b610fc861179e565b6000610fd3866117e4565b90506000610fe0866117e4565b9050610fec8786611baf565b60405160009061100690600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__63cb070de561103a3390565b86868a876040518663ffffffff1660e01b815260040161105e959493929190612792565b600060405180830381865af415801561107b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110a391908101906127e8565b905060006110b16002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe946110fb946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561111557600080fd5b505af1158015611129573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6111553390565b8b8b8b8b8b8860405161116e97969594939291906129ef565b60405180910390a150505050505050505050565b61118a61179e565b6020815111156111ce5760405162461bcd60e51b815260206004820152600f60248201526e72656d61726b20746f6f206c6f6e6760881b6044820152606401610639565b60006111db6108026117e4565b90506111e6346118b3565b60405160009061120090600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__63b92155276112343390565b8585886040518563ffffffff1660e01b81526004016112569493929190612a4e565b600060405180830381865af4158015611273573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261129b91908101906127e8565b905060006112a96000611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe946112f3946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b15801561130d57600080fd5b505af1158015611321573d6000803e3d6000fd5b505050507fca31869d7c65b3930a575eef33c6f69db06b0f1168af96408c4fceca8de0fadc61134d3390565b6108023489868a60405161136696959493929190612a94565b60405180910390a1505050505050565b61137e611de8565b6107e76000611ef2565b611390611de8565b6107e7611f44565b6113a0611de8565b6402540be400836001600160401b0316111561140d5760405162461bcd60e51b815260206004820152602660248201527f7472616e73616374526571756972656457656967687441744d6f737420746f6f604482015265206c6172676560d01b6064820152608401610639565b64e8d4a510008111156114585760405162461bcd60e51b8152602060048201526013602482015272666565416d6f756e7420746f6f206c6172676560681b6044820152606401610639565b6402540be400826001600160401b031611156114b65760405162461bcd60e51b815260206004820152601760248201527f4f766572616c6c57656967687420746f6f206c617267650000000000000000006044820152606401610639565b6040518060600160405280846001600160401b03168152602001828152602001836001600160401b0316815250609b60008660038111156114f9576114f9612c37565b600381111561150a5761150a612c37565b81526020808201929092526040908101600020835181546001600160401b0391821667ffffffffffffffff1991821617835593850151600183015593909101516002909101805491909316911617905550505050565b61156861179e565b6000611573856117e4565b905060006115826108026117e4565b905061158e8686611baf565b6040516000906115a890600160f81b90869060200161270e565b6040516020818303038152906040529050600073__$e184f4046250cd750dfdb139628ab13bdc$__63cb070de56115dc3390565b86868a876040518663ffffffff1660e01b8152600401611600959493929190612792565b600060405180830381865af415801561161d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261164591908101906127e8565b905060006116536002611a28565b609954815160208301516040808501519051635b2479ff60e11b815294955061080d9463b648f3fe9461169d946097946001600160a01b039092169390928a929190600401612899565b600060405180830381600087803b1580156116b757600080fd5b505af11580156116cb573d6000803e3d6000fd5b505050507fe869557c53c6b4ca27e56668068f17eca71394d04718a9214a7667f1474950ff6116f73390565b8a6108028b8b8b8860405161171297969594939291906129ef565b60405180910390a1505050505050505050565b61172d611de8565b6001600160a01b0381166117925760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610639565b61179b81611ef2565b50565b60655460ff16156107e75760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610639565b6001600160a01b0381166000908152609a602090815260408083208151808301909252805460f01b6001600160f01b031916825260010154918101829052906118645760405162461bcd60e51b8152602060048201526012602482015271105cdcd95d081a5cc81b9bdd08195e1a5cdd60721b6044820152606401610639565b80516001600160f01b0319166118ac5760405162461bcd60e51b815260206004820152600d60248201526c125b9d985b1a5908185cdcd95d609a1b6044820152606401610639565b5192915050565b610802600052609a6020527fae00947ee313780ebd51d12b4f1ecb575ce4eb6b099d8cff17facd5b92da71f0548110156119285760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610639565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611989573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ad9190612c4d565b905060006119ba82611f81565b60405163b9f813ff60e01b81529091506108049063b9f813ff906119f19061080290879086906001600160401b0390600401612c66565b600060405180830381600087803b158015611a0b57600080fd5b505af1158015611a1f573d6000803e3d6000fd5b50505050505050565b6040805160608101825260008082526020820181905291810182905290609b81846003811115611a5a57611a5a612c37565b6003811115611a6b57611a6b612c37565b81526020808201929092526040908101600020815160608101835281546001600160401b03908116808352600184015495830195909552600290920154909116918101919091529150611b0c5760405162461bcd60e51b8152602060048201526024808201527f496e76616c6964207472616e7361637452657175697265645765696768744174604482015263135bdcdd60e21b6064820152608401610639565b6000816020015111611b545760405162461bcd60e51b8152602060048201526011602482015270125b9d985b1a5908199959505b5bdd5b9d607a1b6044820152606401610639565b600081604001516001600160401b031611611ba95760405162461bcd60e51b8152602060048201526015602482015274125b9d985b1a59081bdd995c985b1b15d95a59da1d605a1b6044820152606401610639565b92915050565b6001600160a01b038216611bfc5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610639565b6001600160a01b0382166000908152609a6020526040902060010154811015611c605760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610639565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611cc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ce59190612c4d565b90506000611cf282611f81565b9050836001600160a01b0381166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018790526064016020604051808303816000875af1158015611d58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d7c9190612d03565b5060405163b9f813ff60e01b81526108049063b9f813ff90611daf908890889087906001600160401b0390600401612c66565b600060405180830381600087803b158015611dc957600080fd5b505af1158015611ddd573d6000803e3d6000fd5b505050505050505050565b6033546001600160a01b031633146107e75760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610639565b611e4a612091565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054610100900460ff16611ebb5760405162461bcd60e51b815260040161063990612d25565b6107e76120da565b600054610100900460ff16611eea5760405162461bcd60e51b815260040161063990612d25565b6107e761210a565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611f4c61179e565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258611e773390565b60408051808201825260008082526060602083018190528351600280825291810190945291929091816020015b6060815260200190600190039081611fae5790505060995460405160006020820152600160a01b90910460e01b6001600160e01b03191660218201529091506025016040516020818303038152906040528160008151811061201257612012612c21565b6020026020010181905250826040516020016120459190600160f81b815260018101919091526000602182015260220190565b6040516020818303038152906040528160018151811061206757612067612c21565b60209081029190910181019190915260408051808201909152600181529081019190915292915050565b60655460ff166107e75760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610639565b600054610100900460ff166121015760405162461bcd60e51b815260040161063990612d25565b6107e733611ef2565b600054610100900460ff166121315760405162461bcd60e51b815260040161063990612d25565b6065805460ff19169055565b82805482825590600052602060002090810192821561218a579160200282015b8281111561218a578251805161217a91849160209091019061219a565b509160200191906001019061215d565b5061219692915061221a565b5090565b8280546121a69061285e565b90600052602060002090601f0160209004810192826121c8576000855561220e565b82601f106121e157805160ff191683800117855561220e565b8280016001018555821561220e579182015b8281111561220e5782518255916020019190600101906121f3565b50612196929150612237565b8082111561219657600061222e828261224c565b5060010161221a565b5b808211156121965760008155600101612238565b5080546122589061285e565b6000825580601f10612268575050565b601f01602090049060005260206000209081019061179b9190612237565b80356001600160a01b038116811461229d57600080fd5b919050565b80356001600160801b038116811461229d57600080fd5b6000806000606084860312156122ce57600080fd5b6122d784612286565b92506122e5602085016122a2565b91506122f360408501612286565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561233a5761233a6122fc565b604052919050565b60006001600160401b0382111561235b5761235b6122fc565b50601f01601f191660200190565b600082601f83011261237a57600080fd5b813561238d61238882612342565b612312565b8181528460208386010111156123a257600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080608085870312156123d557600080fd5b6123de85612286565b9350602085013592506123f360408601612286565b915060608501356001600160401b0381111561240e57600080fd5b61241a87828801612369565b91505092959194509250565b60008060006060848603121561243b57600080fd5b61244484612286565b9250602084013591506122f360408501612286565b803563ffffffff8116811461229d57600080fd5b60008060008060008060c0878903121561248657600080fd5b61248f87612459565b955061249d60208801612286565b94506124ab60408801612286565b9350606087013592506124c0608088016122a2565b91506124ce60a08801612286565b90509295509295509295565b80356001600160f01b03198116811461229d57600080fd5b60008060006060848603121561250757600080fd5b61251084612286565b925061251e602085016124da565b9150604084013590509250925092565b60008060006060848603121561254357600080fd5b61254c84612286565b925061255a60208501612459565b91506122f3604085016124da565b600080600080600060a0868803121561258057600080fd5b61258986612286565b945061259760208701612286565b9350604086013592506125ac606087016122a2565b91506125ba60808701612286565b90509295509295909350565b600080604083850312156125d957600080fd5b6125e283612286565b915060208301356001600160401b038111156125fd57600080fd5b61260985828601612369565b9150509250929050565b80356004811061229d57600080fd5b80356001600160401b038116811461229d57600080fd5b6000806000806080858703121561264f57600080fd5b61265885612613565b935061266660208601612622565b925061267460408601612622565b9396929550929360600135925050565b60006020828403121561269657600080fd5b61269f82612613565b9392505050565b6000602082840312156126b857600080fd5b61269f82612286565b600080600080608085870312156126d757600080fd5b6126e085612286565b9350602085013592506126f5604086016122a2565b915061270360608601612286565b905092959194509250565b6001600160f81b031992909216825260601b6bffffffffffffffffffffffff1916600182015260150190565b60005b8381101561275557818101518382015260200161273d565b83811115610fba5750506000910152565b6000815180845261277e81602086016020860161273a565b601f01601f19169290920160200192915050565b6001600160a01b03861681526001600160f01b03198581166020830152841660408201526001600160801b038316606082015260a0608082018190526000906127dd90830184612766565b979650505050505050565b6000602082840312156127fa57600080fd5b81516001600160401b0381111561281057600080fd5b8201601f8101841361282157600080fd5b805161282f61238882612342565b81815285602083850101111561284457600080fd5b61285582602083016020860161273a565b95945050505050565b600181811c9082168061287257607f821691505b6020821081141561289357634e487b7160e01b600052602260045260246000fd5b50919050565b60c081526000610100820160ff89541660c08401526001808a01604060e086015282815480855261012094508487019150848160051b8801019450600083815260209350838120815b838110156129955789880361011f190185528154839080891c8982168061290a57607f821691505b89821081141561292857634e487b7160e01b87526022600452602487fd5b818c5260208c0181801561294357600181146129545761297e565b60ff19851682528b8201955061297e565b600088815260209020895b8581101561297857815484820152908e01908d0161295f565b83019650505b50939b5050509587019550509086019086016128e2565b50505050506129ae8186018b6001600160a01b03169052565b50506001600160401b038716604084015282810360608401526129d18187612766565b9150508360808301526127dd60a08301846001600160401b03169052565b6001600160a01b03888116825287811660208301528681166040830152606082018690526001600160801b0385166080830152831660a082015260e060c08201819052600090612a4190830184612766565b9998505050505050505050565b6001600160a01b03851681526001600160f01b031984166020820152608060408201819052600090612a8290830185612766565b82810360608401526127dd8185612766565b6001600160a01b0387811682528681166020830152604082018690528416606082015260c060808201819052600090612acf90830185612766565b82810360a0840152612a418185612766565b6001600160a01b03841681526001600160f01b03198316602082015260606040820181905260009061285590830184612766565b6001600160a01b0386811682528581166020830152604082018590528316606082015260a0608082018190526000906127dd90830184612766565b6001600160a01b038716815263ffffffff861660208201526001600160f01b03198581166040830152841660608201526001600160801b038316608082015260c060a08201819052600090612ba790830184612766565b98975050505050505050565b6001600160a01b03898116825263ffffffff8916602083015287811660408301528681166060830152608082018690526001600160801b03851660a0830152831660c082015261010060e08201819052600090612c1283820185612766565b9b9a5050505050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b600060208284031215612c5f57600080fd5b5051919050565b60018060a01b03851681526000602085818401526080604084015260c0830160ff865116608085015281860151604060a086015281815180845260e08701915060e08160051b8801019350848301925060005b81811015612ce75760df19888603018352612cd5858551612766565b94509285019291850191600101612cb9565b5050506001600160401b03861660608601525091506128559050565b600060208284031215612d1557600080fd5b8151801515811461269f57600080fd5b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea2646970667358221220f45ac93c229a5b1f8499bb5de4f1f8f837b178cbbeaf63149d59f9b8e84a182e64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0x7746ef546d562b443AE4B4145541a3b1a3D75717",
    "BuildCallData": "0x4238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintVAsset(address,uint256,address,string)": {
        "notice": "Minted vAssets"
      },
      "mintVNativeAsset(address,string)": {
        "notice": "Minted vNative assets such as vASTR, vGLMR, vMOVR"
      },
      "redeemAsset(address,uint256,address)": {
        "notice": "Redeem assets"
      },
      "swapAssetsForExactAssets(address,address,uint256,uint128,address)": {
        "notice": "Swap one asset for another"
      },
      "swapAssetsForExactNativeAssets(address,uint256,uint128,address)": {
        "notice": "Swap one asset for native asset"
      },
      "swapNativeAssetsForExactAssets(address,uint128,address)": {
        "notice": "Swap native asset for another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 798,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 908,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "xcmTransactorDestination",
        "offset": 0,
        "slot": "151",
        "type": "t_struct(Multilocation)2194_storage"
      },
      {
        "astId": 910,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "BNCAddress",
        "offset": 0,
        "slot": "153",
        "type": "t_address"
      },
      {
        "astId": 912,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "bifrostParaId",
        "offset": 20,
        "slot": "153",
        "type": "t_uint32"
      },
      {
        "astId": 934,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "addressToAssetInfo",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_struct(AssetInfo)922_storage)"
      },
      {
        "astId": 940,
        "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
        "label": "operationToFeeInfo",
        "offset": 0,
        "slot": "155",
        "type": "t_mapping(t_enum(Operation)917,t_struct(FeeInfo)929_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes2": {
        "encoding": "inplace",
        "label": "bytes2",
        "numberOfBytes": "2"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_enum(Operation)917": {
        "encoding": "inplace",
        "label": "enum MoonbeamSlpx.Operation",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_struct(AssetInfo)922_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct MoonbeamSlpx.AssetInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(AssetInfo)922_storage"
      },
      "t_mapping(t_enum(Operation)917,t_struct(FeeInfo)929_storage)": {
        "encoding": "mapping",
        "key": "t_enum(Operation)917",
        "label": "mapping(enum MoonbeamSlpx.Operation => struct MoonbeamSlpx.FeeInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(FeeInfo)929_storage"
      },
      "t_struct(AssetInfo)922_storage": {
        "encoding": "inplace",
        "label": "struct MoonbeamSlpx.AssetInfo",
        "members": [
          {
            "astId": 919,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "currencyId",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes2"
          },
          {
            "astId": 921,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "operationalMin",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(FeeInfo)929_storage": {
        "encoding": "inplace",
        "label": "struct MoonbeamSlpx.FeeInfo",
        "members": [
          {
            "astId": 924,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "transactRequiredWeightAtMost",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 926,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "feeAmount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 928,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "overallWeight",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Multilocation)2194_storage": {
        "encoding": "inplace",
        "label": "struct XcmTransactorV2.Multilocation",
        "members": [
          {
            "astId": 2190,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "parents",
            "offset": 0,
            "slot": "0",
            "type": "t_uint8"
          },
          {
            "astId": 2193,
            "contract": "contracts/MoonbeamSlpx.sol:MoonbeamSlpx",
            "label": "interior",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_bytes_storage)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}