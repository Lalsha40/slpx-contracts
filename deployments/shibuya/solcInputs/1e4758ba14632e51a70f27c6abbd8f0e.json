{
  "language": "Solidity",
  "sources": {
    "@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTReceiverV2.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity >=0.5.0;\n\ninterface IOFTReceiverV2 {\n    /**\n     * @dev Called by the OFT contract when tokens are received from source chain.\n     * @param _srcChainId The chain id of the source chain.\n     * @param _srcAddress The address of the OFT token contract on the source chain.\n     * @param _nonce The nonce of the transaction on the source chain.\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\n     * @param _amount The amount of tokens to transfer.\n     * @param _payload Additional data with no specified format.\n     */\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == _ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/AstarReceiver.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@layerzerolabs/solidity-examples/contracts/token/oft/v2/interfaces/IOFTReceiverV2.sol\";\nimport \"./interfaces/IOFTV2.sol\";\nimport \"./interfaces/ISlpx.sol\";\nimport \"./interfaces/IOFTWithFee.sol\";\n\ncontract AstarReceiver is Ownable, IOFTReceiverV2 {\n    address public VASTR = 0xfffFffff00000000000000010000000000000010;\n    address public astarSlpx = 0x2fD8bbF5dc8b342C09ABF34f211b3488e2d9d691;\n    uint16 public  destChainId = 10220;\n    address public astrNativeOFT = 0xEaFAF3EDA029A62bCbE8a0C9a4549ef0fEd5a400;\n    address public vAstrProxyOFT = 0xF1d4797E51a4640a76769A50b57abE7479ADd3d8;\n    address public astarZkSlpx;\n    mapping(address => address) public derivativeAddress;\n\n    constructor(address _astarZkSlpx) {\n       astarZkSlpx = _astarZkSlpx;\n    }\n\n    function setDerivativeAddress(address addr) internal {\n        bytes memory bytecode = type(DerivativeContract).creationCode;\n        bytes32 salt = bytes32(uint256(uint160(addr)));\n        bytes memory deploymentData = abi.encodePacked(bytecode, salt);\n        address contractAddress;\n        assembly {\n            contractAddress := create2(0, add(deploymentData, 32), mload(deploymentData), salt)\n        }\n\n        derivativeAddress[addr] = contractAddress;\n    }\n\n    function onOFTReceived(uint16, bytes calldata, uint64, bytes32 _from, uint _amount, bytes calldata _payload) external override {\n    //    require(_msgSender() == astrNativeOFT || _msgSender() == vAstrProxyOFT, \"only native oft can call\");\n    //    require(address(uint160(uint(_from))) == astarZkSlpx, \"only receive msg from astarZkSlpx\");\n\n        (address caller, uint8 actionId) = abi.decode(_payload, (address, uint8));\n        if(derivativeAddress[caller] == address(0)) {\n            setDerivativeAddress(caller);\n        }\n\n        if(actionId == 0) {\n            IOFTWithFee(astrNativeOFT).withdraw(_amount);\n            ISlpx(astarSlpx).mintVNativeAsset{ value: _amount }(derivativeAddress[caller], \"Hello\");\n        } else if (actionId == 1) {\n            IERC20(VASTR).approve(astarSlpx, _amount);\n            ISlpx(astarSlpx).redeemAsset(VASTR, _amount, msg.sender);\n        }\n    }\n\n    function claimVAstr(address addr, bytes calldata _adapterParams) external payable {\n        uint256 amount = DerivativeContract(payable(derivativeAddress[addr])).withdrawVAstr();\n        IERC20(VASTR).approve(vAstrProxyOFT, amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        IOFTV2(vAstrProxyOFT).sendFrom{ value: msg.value }(\n            address(this),\n            destChainId,\n            bytes32(uint(uint160(addr))),\n            amount,\n            callParams\n        );\n    }\n\n    function claimAstr(address addr, uint256 _amount, bytes calldata _adapterParams) external payable {\n        DerivativeContract(payable(derivativeAddress[addr])).withdrawAstr(_amount);\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\n            payable(_msgSender()),\n            address(0),\n            _adapterParams\n        );\n        IOFTWithFee(astrNativeOFT).sendFrom{ value: _amount + msg.value }(\n            address(this),\n            destChainId,\n            bytes32(uint(uint160(addr))),\n            _amount,\n            _amount,\n            callParams\n        );\n    }\n\n    receive() external payable {}\n}\n\ncontract DerivativeContract is ReentrancyGuard  {\n    address public astarReceiver;\n    address public VASTR = 0xfffFffff00000000000000010000000000000010;\n\n    constructor() {\n        astarReceiver = msg.sender;\n    }\n\n    function balanceOf() public view returns (uint) {\n        return IERC20(VASTR).balanceOf(address(this));\n    }\n\n    function withdrawVAstr() external nonReentrant returns(uint256) {\n        require(msg.sender == astarReceiver, \"DerivativeContract: FORBIDDEN\");\n        uint256 balance = balanceOf();\n        IERC20(VASTR).transfer(astarReceiver, balance);\n        return balance;\n    }\n\n    function withdrawAstr(uint256 _amount) external nonReentrant {\n        require(msg.sender == astarReceiver, \"DerivativeContract: FORBIDDEN\");\n        (bool success, ) = msg.sender.call{value: _amount}(\"\");\n        require(success, \"DerivativeContract: failed to withdrawAstr\");\n    }\n\n    receive() external payable {}\n}\n"
    },
    "contracts/interfaces/ICommonOFT.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface ICommonOFT is IERC165 {\n\n    struct LzCallParams {\n        address payable refundAddress;\n        address zroPaymentAddress;\n        bytes adapterParams;\n    }\n\n    /**\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\n     * _dstChainId - L0 defined chain id to send tokens too\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\n     * _amount - amount of the tokens to transfer\n     * _useZro - indicates to use zro to pay L0 fees\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\n     */\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\n\n    /**\n     * @dev returns the circulating amount of tokens on current chain\n     */\n    function circulatingSupply() external view returns (uint);\n\n    /**\n     * @dev returns the address of the ERC20 token\n     */\n    function token() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IOFTV2.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./ICommonOFT.sol\";\n\n/**\n * @dev Interface of the IOFT core standard\n */\ninterface IOFTV2 is ICommonOFT {\n\n    /**\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\n     * `_from` the owner of token\n     * `_dstChainId` the destination chain identifier\n     * `_toAddress` can be any size depending on the `dstChainId`.\n     * `_amount` the quantity of tokens in wei\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\n     */\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\n\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n\n"
    },
    "contracts/interfaces/IOFTWithFee.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\nimport \"./ICommonOFT.sol\";\n\ninterface IOFTWithFee is ICommonOFT {\n    function deposit() external payable;\n    function withdraw(uint _amount) external;\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\n}\n"
    },
    "contracts/interfaces/ISlpx.sol": {
      "content": "// SPDX-License-Identifier: Apache-2.0\npragma solidity 0.8.10;\n\ninterface ISlpx {\n    event Mint(\n        address minter,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode,\n        string remark\n    );\n    event Redeem(\n        address redeemer,\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        bytes callcode\n    );\n    event Swap(\n        address swapper,\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver,\n        bytes callcode\n    );\n\n    event StablePoolSwap(\n        address swapper,\n        uint32 poolId,\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 minDy,\n        address receiver,\n        bytes callcode\n    );\n\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\n    function mintVNativeAsset(\n        address receiver,\n        string memory remark\n    ) external payable;\n\n    /// Minted vAssets\n    function mintVAsset(\n        address assetAddress,\n        uint256 amount,\n        address receiver,\n        string memory remark\n    ) external;\n\n    /// Redeem assets\n    function redeemAsset(\n        address vAssetAddress,\n        uint256 amount,\n        address receiver\n    ) external;\n\n    /// Swap one asset for another\n    function swapAssetsForExactAssets(\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external;\n\n    /// Swap one asset for native asset\n    function swapAssetsForExactNativeAssets(\n        address assetInAddress,\n        uint256 assetInAmount,\n        uint128 assetOutMin,\n        address receiver\n    ) external;\n\n    /// Swap native asset for another\n    function swapNativeAssetsForExactAssets(\n        address assetOutAddress,\n        uint128 assetOutMin,\n        address receiver\n    ) external payable;\n\n    function stablePoolSwap(\n        uint32 poolId,\n        address assetInAddress,\n        address assetOutAddress,\n        uint256 assetInAmount,\n        uint128 minDy,\n        address receiver\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "storageLayout",
          "devdoc",
          "userdoc",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}