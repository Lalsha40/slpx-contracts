{
  "address": "0x6F8895a9270f81D0a0838644A57F639eB49f02Ca",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_astarZkSlpx",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "derivativeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "caller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "derivativeAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BNC",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VASTR",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "astarSlpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "astarZkSlpx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "astrNativeOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "claimAstr",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "claimVAstr",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "derivativeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "destChainId",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        },
        {
          "internalType": "bytes32",
          "name": "_from",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "onOFTReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "polkadotXcm",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vAstrProxyOFT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8fb27776b0f78ea9a805450ee6cf78dfe2066694f63e7232626426317d57bf34",
  "receipt": {
    "to": null,
    "from": "0x4597C97a43dFBb4a398E2b16AA9cE61f90d801DD",
    "contractAddress": "0x6F8895a9270f81D0a0838644A57F639eB49f02Ca",
    "transactionIndex": 0,
    "gasUsed": "1979142",
    "logsBloom": "0x
    "blockHash": "0xb75bd6579e2c5f8e41c365d9fd75cad466f7051857ff3f97b4ce569cf5fbdc7c",
    "transactionHash": "0x8fb27776b0f78ea9a805450ee6cf78dfe2066694f63e7232626426317d57bf34",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5658929,
        "transactionHash": "0x8fb27776b0f78ea9a805450ee6cf78dfe2066694f63e7232626426317d57bf34",
        "address": "0x6F8895a9270f81D0a0838644A57F639eB49f02Ca",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004597c97a43dfbb4a398e2b16aa9ce61f90d801dd"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb75bd6579e2c5f8e41c365d9fd75cad466f7051857ff3f97b4ce569cf5fbdc7c"
      }
    ],
    "blockNumber": 5658929,
    "cumulativeGasUsed": "1979142",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4e1A1FdE10494d714D2620aAF7B27B878458459c"
  ],
  "numDeployments": 1,
  "solcInputHash": "0a121ed68dd3478312a8c69ec9bbeb46",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_astarZkSlpx\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"derivativeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"derivativeAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BNC\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VASTR\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astarSlpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astarZkSlpx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"astrNativeOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"claimAstr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"claimVAstr\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"derivativeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"destChainId\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"},{\"internalType\":\"bytes32\",\"name\":\"_from\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"onOFTReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"polkadotXcm\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vAstrProxyOFT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstarReceiver.sol\":\"AstarReceiver\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xad32f6821f860555f9530902a65b54203a4f5db2117f4384ae47a124958078db\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/AstarReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./interfaces/IOFTReceiverV2.sol\\\";\\nimport \\\"./interfaces/IOFTV2.sol\\\";\\nimport \\\"./interfaces/IOFTWithFee.sol\\\";\\nimport \\\"./interfaces/XCM.sol\\\";\\nimport \\\"./interfaces/XCM_v2.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\nimport \\\"./AstarSlpx.sol\\\";\\n\\n\\ncontract AstarReceiver is Ownable, IOFTReceiverV2 {\\n    bytes1 private constant ASTAR_CHAIN_TYPE = 0x00;\\n    bytes2 private constant ASTR_CURRENCY_ID = 0x0803;\\n    bytes2 private constant VASTR_CURRENCY_ID = 0x0903;\\n    uint256 private constant BIFROST_PARA_ID = 2030;\\n    bool private constant IS_RELAY_CHAIN = false;\\n    address public VASTR = 0xfffFffff00000000000000010000000000000010;\\n    address public BNC = 0xfFffFffF00000000000000010000000000000007;\\n    address public astarSlpx = 0x2fD8bbF5dc8b342C09ABF34f211b3488e2d9d691;\\n    address public polkadotXcm = 0x0000000000000000000000000000000000005004;\\n    address public astrNativeOFT = 0xEaFAF3EDA029A62bCbE8a0C9a4549ef0fEd5a400;\\n    address public vAstrProxyOFT = 0xF1d4797E51a4640a76769A50b57abE7479ADd3d8;\\n    address public astarZkSlpx;\\n    uint16  public destChainId = 10220;\\n    mapping(address => address) public derivativeAddress;\\n\\n    event Mint(address caller, address derivativeAddress, uint256 amount);\\n    event Redeem(address caller, address derivativeAddress, uint256 amount);\\n\\n    constructor(address _astarZkSlpx) {\\n       astarZkSlpx = _astarZkSlpx;\\n    }\\n\\n    function zkSlpxMint(address _from, address _to, uint256 _amount) internal {\\n        require(_from != address(0), \\\"Mint: _from != address(0)\\\");\\n        require(_to != address(0), \\\"Mint: _to != address(0)\\\");\\n        require(_amount != 0, \\\"Mint: _amount != 0\\\");\\n        xcmTransferNativeAsset(_from, _amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN_TYPE, _to);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(_from, ASTR_CURRENCY_ID, targetChain, \\\"AstarZkEvm\\\");\\n        (uint64 transactWeight, uint256 feeAmount) = AstarSlpx(astarSlpx).operationToFeeInfo(AstarSlpx.Operation.Mint);\\n\\n        // xcm transact\\n        require(XCM(polkadotXcm).remote_transact(BIFROST_PARA_ID,IS_RELAY_CHAIN,BNC,feeAmount,callData,transactWeight),\\\"Failed to send xcm\\\");\\n        emit Mint(_from, _to, _amount);\\n    }\\n\\n    function zkSlpxRedeem(address _from, address _to, uint256 _amount) internal {\\n        require(_from != address(0), \\\"Redeem: _from != address(0)\\\");\\n        require(_to != address(0), \\\"Redeem: _to != address(0)\\\");\\n        require(_amount != 0, \\\"Redeem: _amount != 0\\\");\\n        xcmTransferAsset(VASTR, _from, _amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN_TYPE, _to);\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(_from, VASTR_CURRENCY_ID, targetChain);\\n        (uint64 transactWeight, uint256 feeAmount) = AstarSlpx(astarSlpx).operationToFeeInfo(AstarSlpx.Operation.Redeem);\\n\\n        // xcm transact\\n        require(XCM(polkadotXcm).remote_transact(BIFROST_PARA_ID,IS_RELAY_CHAIN,BNC,feeAmount,callData,transactWeight),\\\"Failed to send xcm\\\");\\n        emit Mint(_from, _to, _amount);\\n    }\\n    \\n\\n    function onOFTReceived(uint16, bytes calldata, uint64, bytes32 _from, uint _amount, bytes calldata _payload) external override {\\n        require(_msgSender() == astrNativeOFT || _msgSender() == vAstrProxyOFT, \\\"only native oft can call\\\");\\n        require(address(uint160(uint(_from))) == astarZkSlpx, \\\"only receive msg from astarZkSlpx\\\");\\n        (address caller, uint8 actionId) = abi.decode(_payload, (address, uint8));\\n        if(derivativeAddress[caller] == address(0)) {\\n            setDerivativeAddress(caller);\\n        }\\n\\n        if(actionId == 0) {\\n            IOFTWithFee(astrNativeOFT).withdraw(_amount);\\n            zkSlpxMint(caller, derivativeAddress[caller], _amount);\\n        } else if (actionId == 1) {\\n            zkSlpxRedeem(caller, derivativeAddress[caller], _amount);\\n        }\\n    }\\n\\n    function claimVAstr(address addr, bytes calldata _adapterParams) external payable {\\n        uint256 amount = DerivativeContract(payable(derivativeAddress[addr])).withdrawVAstr();\\n        IERC20(VASTR).approve(vAstrProxyOFT, amount);\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n        IOFTV2(vAstrProxyOFT).sendFrom{ value: msg.value }(\\n            address(this),\\n            destChainId,\\n            bytes32(uint(uint160(addr))),\\n            amount,\\n            callParams\\n        );\\n    }\\n\\n    function claimAstr(address addr, uint256 _amount, uint256 _minAmount, bytes calldata _adapterParams) external payable {\\n        DerivativeContract(payable(derivativeAddress[addr])).withdrawAstr(_amount);\\n        ICommonOFT.LzCallParams memory callParams = ICommonOFT.LzCallParams(\\n            payable(_msgSender()),\\n            address(0),\\n            _adapterParams\\n        );\\n        IOFTWithFee(astrNativeOFT).sendFrom{ value: _amount + msg.value }(\\n            address(this),\\n            destChainId,\\n            bytes32(uint(uint160(addr))),\\n            _amount,\\n            _minAmount,\\n            callParams\\n        );\\n    }\\n\\n    function setDerivativeAddress(address addr) internal {\\n        bytes memory bytecode = type(DerivativeContract).creationCode;\\n        bytes32 salt = bytes32(uint256(uint160(addr)));\\n        bytes memory deploymentData = abi.encodePacked(bytecode, salt);\\n        address contractAddress;\\n        assembly {\\n            contractAddress := create2(0, add(deploymentData, 32), mload(deploymentData), salt)\\n        }\\n\\n        derivativeAddress[addr] = contractAddress;\\n    }\\n\\n    function xcmTransferNativeAsset(address to, uint256 amount) internal {\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = address(0);\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(polkadotXcm).assets_reserve_transfer(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                IS_RELAY_CHAIN,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n\\n    function xcmTransferAsset(address assetAddress, address to,  uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(to);\\n\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = assetAddress;\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(polkadotXcm).assets_withdraw(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                IS_RELAY_CHAIN,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function getXtokensDestination(bytes32 publicKey) internal pure returns (XCM_v2.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(uint32(2030)));\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        XCM_v2.Multilocation memory dest = XCM_v2.Multilocation({parents: 1,interior: interior});\\n        return dest;\\n    }\\n\\n    receive() external payable {}\\n}\\n\\ncontract DerivativeContract is ReentrancyGuard  {\\n    address public astarReceiver;\\n    address public VASTR = 0xfffFffff00000000000000010000000000000010;\\n\\n    constructor() {\\n        astarReceiver = msg.sender;\\n    }\\n\\n    function balanceOf() public view returns (uint) {\\n        return IERC20(VASTR).balanceOf(address(this));\\n    }\\n\\n    function withdrawVAstr() external nonReentrant returns(uint256) {\\n        require(msg.sender == astarReceiver, \\\"DerivativeContract: forbidden\\\");\\n        uint256 balance = balanceOf();\\n        require(balance != 0, \\\"DerivativeContract: balance to low\\\");\\n        IERC20(VASTR).transfer(astarReceiver, balance);\\n        return balance;\\n    }\\n\\n    function withdrawAstr(uint256 _amount) external nonReentrant {\\n        require(msg.sender == astarReceiver, \\\"DerivativeContract: forbidden\\\");\\n        require(_amount != 0, \\\"DerivativeContract: balance to low\\\");\\n        (bool success, ) = msg.sender.call{value: _amount}(\\\"\\\");\\n        require(success, \\\"DerivativeContract: failed to withdrawAstr\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x6bb9a7f978b693b45cb4fc3192bdb7dc2d1bfd69814de4e4fab6a6072ca500f1\",\"license\":\"Apache-2.0\"},\"contracts/AstarSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/XCM.sol\\\";\\nimport \\\"./interfaces/XCM_v2.sol\\\";\\nimport \\\"./interfaces/ISlpx.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\n\\ncontract AstarSlpx is ISlpx, OwnableUpgradeable, PausableUpgradeable {\\n    address private constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n    address private constant BNC_ADDRESS =\\n        0xfFffFffF00000000000000010000000000000007;\\n    address private constant XCM_ADDRESS =\\n        0x0000000000000000000000000000000000005004;\\n    bytes1 private constant ASTAR_CHAIN = 0x00;\\n    uint32 private constant BIFROST_PARA_ID = 2030;\\n\\n    enum Operation {\\n        Mint,\\n        Redeem,\\n        ZenlinkSwap,\\n        StableSwap\\n    }\\n\\n    struct AssetInfo {\\n        bytes2 currencyId;\\n        uint256 operationalMin;\\n    }\\n\\n    struct FeeInfo {\\n        uint64 transactRequiredWeightAtMost;\\n        uint256 feeAmount;\\n    }\\n\\n    mapping(address => AssetInfo) public addressToAssetInfo;\\n    mapping(Operation => FeeInfo) public operationToFeeInfo;\\n\\n    function checkAssetIsExist(\\n        address assetAddress\\n    ) internal view returns (bytes2) {\\n        AssetInfo memory assetInfo = addressToAssetInfo[assetAddress];\\n        require(assetInfo.operationalMin > 0, \\\"Asset is not exist\\\");\\n        require(assetInfo.currencyId != bytes2(0), \\\"Invalid asset\\\");\\n        return assetInfo.currencyId;\\n    }\\n\\n    function checkFeeInfo(\\n        Operation operation\\n    ) internal view returns (FeeInfo memory) {\\n        FeeInfo memory feeInfo = operationToFeeInfo[operation];\\n        require(\\n            feeInfo.transactRequiredWeightAtMost > 0,\\n            \\\"Invalid transactRequiredWeightAtMost\\\"\\n        );\\n        require(feeInfo.feeAmount > 0, \\\"Invalid feeAmount\\\");\\n        return feeInfo;\\n    }\\n\\n    function initialize() public initializer {\\n        __Ownable_init();\\n        __Pausable_init();\\n        setAssetAddressInfo(NATIVE_ASSET_ADDRESS, 0x0803, 1000000000000000000);\\n        setOperationToFeeInfo(Operation.Mint, 10000000000, 1000000000000);\\n        setOperationToFeeInfo(Operation.Redeem, 10000000000, 1000000000000);\\n    }\\n\\n    function setOperationToFeeInfo(\\n        Operation _operation,\\n        uint64 _transactRequiredWeightAtMost,\\n        uint256 _feeAmount\\n    ) public onlyOwner {\\n        require(\\n            _transactRequiredWeightAtMost <= 10000000000,\\n            \\\"transactRequiredWeightAtMost too large\\\"\\n        );\\n        require(_feeAmount <= 1000000000000, \\\"feeAmount too large\\\");\\n        operationToFeeInfo[_operation] = FeeInfo(\\n            _transactRequiredWeightAtMost,\\n            _feeAmount\\n        );\\n    }\\n\\n    function setAssetAddressInfo(\\n        address assetAddress,\\n        bytes2 currencyId,\\n        uint256 minimumValue\\n    ) public onlyOwner {\\n        require(minimumValue != 0, \\\"Invalid minimumValue\\\");\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        AssetInfo storage assetInfo = addressToAssetInfo[assetAddress];\\n        assetInfo.currencyId = currencyId;\\n        assetInfo.operationalMin = minimumValue;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            amount >= addressToAssetInfo[NATIVE_ASSET_ADDRESS].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = NATIVE_ASSET_ADDRESS;\\n        assetAmount[0] = amount;\\n        require(\\n            XCM(XCM_ADDRESS).assets_reserve_transfer(\\n                assetId,\\n                assetAmount,\\n                publicKey,\\n                false,\\n                BIFROST_PARA_ID,\\n                0\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            amount >= addressToAssetInfo[assetAddress].operationalMin,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n\\n        XCM_v2.Multilocation memory dest_account = getXtokensDestination(\\n            publicKey\\n        );\\n        IERC20 asset = IERC20(assetAddress);\\n        asset.transferFrom(_msgSender(), address(this), amount);\\n        require(\\n            XCM_v2(XCM_ADDRESS).transfer(\\n                assetAddress,\\n                amount,\\n                dest_account,\\n                XCM_v2.WeightV2(0,0)\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n    }\\n\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable override whenNotPaused {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            targetChain,\\n            remark\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            msg.value,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external override {\\n        require(bytes(remark).length <= 32, \\\"remark too long\\\");\\n\\n        bytes2 token = checkAssetIsExist(assetAddress);\\n\\n        // xtokens call\\n        xcmTransferAsset(assetAddress, amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            token,\\n            targetChain,\\n            remark\\n        );\\n\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Mint);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Mint(\\n            _msgSender(),\\n            assetAddress,\\n            amount,\\n            receiver,\\n            callData,\\n            remark\\n        );\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = checkAssetIsExist(vAssetAddress);\\n\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            targetChain\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.Redeem);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, receiver, callData);\\n    }\\n\\n    function stablePoolSwap(\\n        uint32,\\n        address,\\n        address,\\n        uint256,\\n        uint128,\\n        address\\n    ) external pure override {\\n        require(false, \\\"Not support\\\");\\n    }\\n\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = checkAssetIsExist(assetInAddress);\\n        bytes2 assetOut = checkAssetIsExist(assetOutAddress);\\n        require(\\n            assetIn != bytes2(0) && assetOut != bytes2(0),\\n            \\\"Invalid currencyId\\\"\\n        );\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            assetOut,\\n            assetOutMin,\\n            targetChain\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            assetOutAddress,\\n            assetInAmount,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = checkAssetIsExist(assetInAddress);\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            nativeToken,\\n            assetOutMin,\\n            targetChain\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            NATIVE_ASSET_ADDRESS,\\n            assetInAmount,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external payable override whenNotPaused {\\n        bytes2 assetOut = checkAssetIsExist(assetOutAddress);\\n        bytes2 nativeToken = checkAssetIsExist(NATIVE_ASSET_ADDRESS);\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory targetChain = abi.encodePacked(ASTAR_CHAIN, receiver);\\n        bytes memory callData = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            nativeToken,\\n            assetOut,\\n            assetOutMin,\\n            targetChain\\n        );\\n        // xcm transact\\n        FeeInfo memory feeInfo = checkFeeInfo(Operation.ZenlinkSwap);\\n        require(\\n            XCM(XCM_ADDRESS).remote_transact(\\n                BIFROST_PARA_ID,\\n                false,\\n                BNC_ADDRESS,\\n                feeInfo.feeAmount,\\n                callData,\\n                feeInfo.transactRequiredWeightAtMost\\n            ),\\n            \\\"Failed to send xcm\\\"\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            assetOutAddress,\\n            msg.value,\\n            assetOutMin,\\n            receiver,\\n            callData\\n        );\\n    }\\n\\n    function getXtokensDestination(\\n        bytes32 publicKey\\n    ) internal pure returns (XCM_v2.Multilocation memory) {\\n        bytes[] memory interior = new bytes[](2);\\n        // Parachain: 2001/2030\\n        interior[0] = bytes.concat(hex\\\"00\\\", bytes4(BIFROST_PARA_ID));\\n        // AccountId32: { id: public_key , network: any }\\n        interior[1] = bytes.concat(hex\\\"01\\\", publicKey, hex\\\"00\\\");\\n        XCM_v2.Multilocation memory dest = XCM_v2.Multilocation({\\n            parents: 1,\\n            interior: interior\\n        });\\n\\n        return dest;\\n    }\\n}\\n\",\"keccak256\":\"0x6f55ccb3f87efd9923a22d6255622243b24804787bec90c79dc79430a7237c8f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ICommonOFT.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface ICommonOFT is IERC165 {\\n\\n    struct LzCallParams {\\n        address payable refundAddress;\\n        address zroPaymentAddress;\\n        bytes adapterParams;\\n    }\\n\\n    /**\\n     * @dev estimate send token `_tokenId` to (`_dstChainId`, `_toAddress`)\\n     * _dstChainId - L0 defined chain id to send tokens too\\n     * _toAddress - dynamic bytes array which contains the address to whom you are sending tokens to on the dstChain\\n     * _amount - amount of the tokens to transfer\\n     * _useZro - indicates to use zro to pay L0 fees\\n     * _adapterParam - flexible bytes array to indicate messaging adapter services in L0\\n     */\\n    function estimateSendFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    function estimateSendAndCallFee(uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, bool _useZro, bytes calldata _adapterParams) external view returns (uint nativeFee, uint zroFee);\\n\\n    /**\\n     * @dev returns the circulating amount of tokens on current chain\\n     */\\n    function circulatingSupply() external view returns (uint);\\n\\n    /**\\n     * @dev returns the address of the ERC20 token\\n     */\\n    function token() external view returns (address);\\n}\\n\",\"keccak256\":\"0x7f487b03f4560c90bb1c1dd7a3f07cad38ea9187039131ba884c8c8f05cf0b49\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTReceiverV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface IOFTReceiverV2 {\\n    /**\\n     * @dev Called by the OFT contract when tokens are received from source chain.\\n     * @param _srcChainId The chain id of the source chain.\\n     * @param _srcAddress The address of the OFT token contract on the source chain.\\n     * @param _nonce The nonce of the transaction on the source chain.\\n     * @param _from The address of the account who calls the sendAndCall() on the source chain.\\n     * @param _amount The amount of tokens to transfer.\\n     * @param _payload Additional data with no specified format.\\n     */\\n    function onOFTReceived(uint16 _srcChainId, bytes calldata _srcAddress, uint64 _nonce, bytes32 _from, uint _amount, bytes calldata _payload) external;\\n}\\n\",\"keccak256\":\"0xbdb4d693fea188b2ea7c6e8627474c227f9fc7fa4b33a25a525d9e7b9082344d\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTV2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\n/**\\n * @dev Interface of the IOFT core standard\\n */\\ninterface IOFTV2 is ICommonOFT {\\n\\n    /**\\n     * @dev send `_amount` amount of token to (`_dstChainId`, `_toAddress`) from `_from`\\n     * `_from` the owner of token\\n     * `_dstChainId` the destination chain identifier\\n     * `_toAddress` can be any size depending on the `dstChainId`.\\n     * `_amount` the quantity of tokens in wei\\n     * `_refundAddress` the address LayerZero refunds if too much message fee is sent\\n     * `_zroPaymentAddress` set to address(0x0) if not paying in ZRO (LayerZero Token)\\n     * `_adapterParams` is a flexible bytes array to indicate messaging adapter services\\n     */\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, LzCallParams calldata _callParams) external payable;\\n\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\\n\",\"keccak256\":\"0xe1aae1b3613481bf4d3c4d91c117b044f849dbde88841e49207c5da838fac42f\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IOFTWithFee.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./ICommonOFT.sol\\\";\\n\\ninterface IOFTWithFee is ICommonOFT {\\n    function deposit() external payable;\\n    function withdraw(uint _amount) external;\\n    function sendFrom(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, LzCallParams calldata _callParams) external payable;\\n    function sendAndCall(address _from, uint16 _dstChainId, bytes32 _toAddress, uint _amount, uint _minAmount, bytes calldata _payload, uint64 _dstGasForCall, LzCallParams calldata _callParams) external payable;\\n}\\n\",\"keccak256\":\"0x9d8ebcbbe95499d1d86cdf1996f1d4d01352f81557a9796f6d82faf6bd82e108\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/ISlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface ISlpx {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode,\\n        string remark\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        bytes callcode\\n    );\\n    event Swap(\\n        address swapper,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver,\\n        bytes callcode\\n    );\\n\\n    event StablePoolSwap(\\n        address swapper,\\n        uint32 poolId,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 minDy,\\n        address receiver,\\n        bytes callcode\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset(\\n        address receiver,\\n        string memory remark\\n    ) external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(\\n        address assetAddress,\\n        uint256 amount,\\n        address receiver,\\n        string memory remark\\n    ) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount,\\n        address receiver\\n    ) external;\\n\\n    /// Swap one asset for another\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external;\\n\\n    /// Swap one asset for native asset\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external;\\n\\n    /// Swap native asset for another\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin,\\n        address receiver\\n    ) external payable;\\n\\n    function stablePoolSwap(\\n        uint32 poolId,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 minDy,\\n        address receiver\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0447ab0ad78b51b3037cd93d37df9fb446f820459246c717645454572083a50e\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XCM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title XCM interface.\\n */\\ninterface XCM {\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Execute a transaction on a remote chain.\\n     * @param parachain_id - destination parachain Id (ignored if is_relay is true)\\n     * @param is_relay - if true, destination is relay_chain, if false it is parachain (see previous argument)\\n     * @param payment_asset_id - ETH address of the local asset derivate used to pay for execution in the destination chain\\n     * @param payment_amount - amount of payment asset to use for execution payment - should cover cost of XCM instructions + Transact call weight.\\n     * @param call - encoded call data (must be decodable by remote chain)\\n     * @param transact_weight - max weight that the encoded call is allowed to consume in the destination chain\\n     * @return bool confirmation whether the XCM message sent.\\n     */\\n    function remote_transact(\\n        uint256 parachain_id,\\n        bool is_relay,\\n        address payment_asset_id,\\n        uint256 payment_amount,\\n        bytes calldata call,\\n        uint64 transact_weight\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0xeabf8e2f6d7ecd2aa589761b5052c04baed2ef6bc3e65e3846b563d680928330\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XCM_v2.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity ^0.8.0;\\n\\n\\n/**\\n * @title XCM interface.\\n */\\ninterface XCM_v2 {\\n    // A multilocation is defined by its number of parents and the encoded junctions (interior)\\n    struct Multilocation {\\n        uint8 parents;\\n        bytes[] interior;\\n    }\\n\\n    struct WeightV2{\\n        uint64 ref_time;\\n        uint64 proof_size;\\n    }\\n\\n    // A MultiAsset is defined by a multilocation and an amount\\n    struct MultiAsset {\\n        Multilocation location;\\n        uint256 amount;\\n    }\\n\\n    // A Currency is defined by address and the amount to be transferred\\n    struct Currency {\\n        address currencyAddress;\\n        uint256 amount;\\n    }\\n\\n    /// Transfer a token through XCM based on its address\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer(\\n        address currencyAddress,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencyAddress The ERC20 address of the currency we want to transfer\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param fee The amount to be spent to pay for execution in destination chain\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_with_fee(\\n        address currencyAddress,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its MultiLocation\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multiasset(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer a token through XCM based on its MultiLocation specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param asset The asset we want to transfer, defined by its multilocation.\\n    /// Currently only Concrete Fungible assets\\n    /// @param amount The amount of tokens we want to transfer\\n    /// @param fee The amount to be spent to pay for execution in destination chain\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multiasset_with_fee(\\n        Multilocation memory asset,\\n        uint256 amount,\\n        uint256 fee,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer several tokens at once through XCM based on its address specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param currencies The currencies we want to transfer, defined by their address and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multi_currencies(\\n        Currency[] memory currencies,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /// Transfer several tokens at once through XCM based on its location specifying fee\\n    ///\\n    /// @dev The token transfer burns/transfers the corresponding amount before sending\\n    /// @param assets The assets we want to transfer, defined by their location and amount.\\n    /// @param feeItem Which of the currencies to be used as fee\\n    /// @param destination The Multilocation to which we want to send the tokens\\n    /// @param weight The weight we want to buy in the destination chain, to set the \\n    /// weightlimit to Unlimited, you should use the value 0 for ref_time\\n    function transfer_multi_assets(\\n        MultiAsset[] memory assets,\\n        uint32 feeItem,\\n        Multilocation memory destination,\\n        WeightV2 memory weight\\n    ) external returns (bool);\\n\\n    /**\\n     * @param destination - Multilocation of destination chain where to send this call\\n     * @param xcm_call - encoded xcm call you want to send to destination\\n     **/\\n    function send_xcm(\\n        Multilocation memory destination,\\n        bytes memory xcm_call\\n    ) external returns (bool);\\n}\",\"keccak256\":\"0x854888a6ca0f6949b9d0fe45a27e5f8ad47342de7036a957186e7e20694644f7\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0x2a5dd8e6b32dfaf911e5d1b26a25dae4d489b4e16052659077f9f59d34da9ad2\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        require(key.length == 0, \\\"Invalid key\\\");\\n        require(out_len == 32, \\\"Invalid out_len\\\");\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x196399822da1125151480ae7b85587fae83c6a59e81d6673eb68465e7a4d9304\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n    uint8 public constant STABLE_POOL_SWAP_CALL_INDEX = 3;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes memory targetChain,\\n        string memory remark\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                token,\\n                targetChain,\\n                toScaleString(remark)\\n            );\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 currency_out_min,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildStablePoolSwapCallBytes(\\n        address caller,\\n        uint32 pool_id,\\n        bytes2 currency_in,\\n        bytes2 currency_out,\\n        uint128 min_dy,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(STABLE_POOL_SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                encode_uint32(pool_id),\\n                currency_in,\\n                currency_out,\\n                encode_uint128(min_dy),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes memory targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint32(uint32 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(4);\\n        for (uint i = 0; i < 4; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function toTruncBytes(uint64 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(8);\\n        uint len = 0;\\n        for (uint i = 0; i < 8; i++) {\\n            uint8 temp = uint8(x / (2 ** (8 * i)));\\n            if (temp != 0) {\\n                b[i] = bytes1(temp);\\n            } else {\\n                len = i;\\n                break;\\n            }\\n        }\\n        bytes memory rst = new bytes(len);\\n        for (uint i = 0; i < len; i++) {\\n            rst[i] = b[i];\\n        }\\n        return rst;\\n    }\\n\\n    // Convert an hexadecimal character to their value\\n    function fromScaleChar(uint8 c) internal pure returns (uint8) {\\n        if (bytes1(c) >= bytes1(\\\"0\\\") && bytes1(c) <= bytes1(\\\"9\\\")) {\\n            return 48 + c - uint8(bytes1(\\\"0\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"a\\\") && bytes1(c) <= bytes1(\\\"z\\\")) {\\n            return 97 + c - uint8(bytes1(\\\"a\\\"));\\n        }\\n        if (bytes1(c) >= bytes1(\\\"A\\\") && bytes1(c) <= bytes1(\\\"Z\\\")) {\\n            return 65 + c - uint8(bytes1(\\\"A\\\"));\\n        }\\n        revert(\\\"fail\\\");\\n    }\\n\\n    // encode the string to bytes\\n    // following the scale format\\n    // format: len + content\\n    // a-z: 61->87\\n    // A-Z: 41->57\\n    // 0-9: 30->40\\n    function toScaleString(\\n        string memory s\\n    ) internal pure returns (bytes memory) {\\n        bytes memory ss = bytes(s);\\n        bytes memory len = toTruncBytes(uint64(ss.length * 4));\\n        bytes memory content = new bytes(ss.length);\\n        for (uint i = 0; i < ss.length; ++i) {\\n            content[i] = bytes1(fromScaleChar(uint8(ss[i])));\\n        }\\n        bytes memory rst = bytes.concat(len, content);\\n        return rst;\\n    }\\n}\\n\",\"keccak256\":\"0xf338fd01a9f7c3677949ad54f3ad65294d27944c62c4af0cf4b44b5933ed90eb\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6080604052600180546001600160a01b031990811673ffffffff000000000000000100000000000000101790915560028054821673ffffffff00000000000000010000000000000007179055600380548216732fd8bbf5dc8b342c09abf34f211b3488e2d9d69117905560048054821661500417905560058054821673eafaf3eda029a62bcbe8a0c9a4549ef0fed5a4001790556006805490911673f1d4797e51a4640a76769a50b57abe7479add3d8179055600780546109fb60a21b61ffff60a01b199091161790553480156100d557600080fd5b5060405162002133380380620021338339810160408190526100f691610174565b6100ff33610124565b600780546001600160a01b0319166001600160a01b03929092169190911790556101a4565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561018657600080fd5b81516001600160a01b038116811461019d57600080fd5b9392505050565b611f7f80620001b46000396000f3fe6080604052600436106100ec5760003560e01c80638da5cb5b1161008a578063c4af1c0b11610059578063c4af1c0b14610266578063c95b6f0e1461029b578063f29588c7146102bb578063f2fde38b146102db57600080fd5b80638da5cb5b146101d25780639641e45e146101f0578063a852ffb614610210578063aae9ecff1461024657600080fd5b8063552a530e116100c6578063552a530e1461016a578063715018a61461018a5780637fcf35da1461019f5780638890f1ce146101bf57600080fd5b806319cd0839146100f85780632991e4e61461013557806352b814b61461015557600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50600554610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50600154610118906001600160a01b031681565b610168610163366004611346565b6102fb565b005b34801561017657600080fd5b50600754610118906001600160a01b031681565b34801561019657600080fd5b506101686104e2565b3480156101ab57600080fd5b506101686101ba3660046113b1565b6104f6565b6101686101cd366004611462565b6106e5565b3480156101de57600080fd5b506000546001600160a01b0316610118565b3480156101fc57600080fd5b50600354610118906001600160a01b031681565b34801561021c57600080fd5b5061011861022b3660046114cc565b6008602052600090815260409020546001600160a01b031681565b34801561025257600080fd5b50600454610118906001600160a01b031681565b34801561027257600080fd5b5060075461028890600160a01b900461ffff1681565b60405161ffff909116815260200161012c565b3480156102a757600080fd5b50600654610118906001600160a01b031681565b3480156102c757600080fd5b50600254610118906001600160a01b031681565b3480156102e757600080fd5b506101686102f63660046114cc565b610857565b6001600160a01b03808416600090815260086020908152604080832054815163e2fda99b60e01b815291519394169263e2fda99b92600480840193919291829003018187875af1158015610353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037791906114f0565b60015460065460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af11580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611509565b50600060405180606001604052806104073390565b6001600160a01b0316815260200160006001600160a01b0316815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525060065460075460405163695ef6bf60e01b81529293506001600160a01b039182169263695ef6bf9234926104a9923092600160a01b90920461ffff16918c1690899089906004016115c4565b6000604051808303818588803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b50505050505050505050565b6104ea6108d0565b6104f4600061092a565b565b6005546001600160a01b0316336001600160a01b0316148061052b57506006546001600160a01b0316336001600160a01b0316145b61057c5760405162461bcd60e51b815260206004820152601860248201527f6f6e6c79206e6174697665206f66742063616e2063616c6c000000000000000060448201526064015b60405180910390fd5b6007546001600160a01b038581169116146105e35760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792072656365697665206d73672066726f6d2061737461725a6b536c706044820152600f60fb1b6064820152608401610573565b6000806105f283850185611606565b6001600160a01b0380831660009081526008602052604090205492945090925016610620576106208261097a565b60ff81166106b257600554604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600860205260409020546106ad925084911687610a12565b6104d6565b8060ff16600114156104d6576001600160a01b038083166000908152600860205260409020546104d69184911687610d27565b6001600160a01b03858116600090815260086020526040908190205490516303b4814560e21b815260048101879052911690630ed2051490602401600060405180830381600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b50505050600060405180606001604052806107663390565b6001600160a01b0316815260200160006001600160a01b0316815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506005549091506001600160a01b0316632cdf0b956107da3488611645565b60075460405160e084901b6001600160e01b031916815261081d913091600160a01b90910461ffff16906001600160a01b038d16908c908c908a9060040161166b565b6000604051808303818588803b15801561083657600080fd5b505af115801561084a573d6000803e3d6000fd5b5050505050505050505050565b61085f6108d0565b6001600160a01b0381166108c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610573565b6108cd8161092a565b50565b6000546001600160a01b031633146104f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610573565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006040518060200161098c906112db565b601f1982820381018352601f9091011660408190529091506001600160a01b038316906000906109c290849084906020016116b4565b60405160208183030381529060405290506000828251602084016000f56001600160a01b03958616600090815260086020526040902080546001600160a01b031916919096161790945550505050565b6001600160a01b038316610a685760405162461bcd60e51b815260206004820152601960248201527f4d696e743a205f66726f6d20213d2061646472657373283029000000000000006044820152606401610573565b6001600160a01b038216610abe5760405162461bcd60e51b815260206004820152601760248201527f4d696e743a205f746f20213d20616464726573732830290000000000000000006044820152606401610573565b80610b005760405162461bcd60e51b815260206004820152601260248201527104d696e743a205f616d6f756e7420213d20360741b6044820152606401610573565b610b0a8382610f13565b604051600090610b2090829085906020016116d6565b60408051601f198184030181529082905263b921552760e01b8252915060009073051713fD66845a13BF23BACa008C5C22C27Ccb589063b921552790610b7390889061080360f01b908790600401611702565b600060405180830381865af4158015610b90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb8919081019061177a565b600354604051635eef7b0d60e11b815291925060009182916001600160a01b03169063bddef61a90610bee90849060040161181c565b6040805180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190611844565b60048054600254604051637c87590960e11b81529496509294506001600160a01b039081169363f90eb21293610c74936107ee9360009392169188918b918b9101611872565b6020604051808303816000875af1158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb79190611509565b610cd35760405162461bcd60e51b8152600401610573906118c4565b604080516001600160a01b03808a168252881660208201529081018690527fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89060600160405180910390a150505050505050565b6001600160a01b038316610d7d5760405162461bcd60e51b815260206004820152601b60248201527f52656465656d3a205f66726f6d20213d206164647265737328302900000000006044820152606401610573565b6001600160a01b038216610dd35760405162461bcd60e51b815260206004820152601960248201527f52656465656d3a205f746f20213d2061646472657373283029000000000000006044820152606401610573565b80610e175760405162461bcd60e51b8152602060048201526014602482015273052656465656d3a205f616d6f756e7420213d20360641b6044820152606401610573565b600154610e2e906001600160a01b031684836110d1565b604051600090610e4490829085906020016116d6565b60408051601f1981840301815290829052639f00478360e01b8252915060009073051713fD66845a13BF23BACa008C5C22C27Ccb5890639f00478390610e9790889061090360f01b9087906004016118f0565b600060405180830381865af4158015610eb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610edc919081019061177a565b600354604051635eef7b0d60e11b815291925060009182916001600160a01b03169063bddef61a90610bee9060019060040161181c565b604051631932052960e11b81526001600160a01b0383166004820152600090734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa906332640a5290602401602060405180830381865af4158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9291906114f0565b60408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050600082600081518110610ff057610ff061192d565b60200260200101906001600160a01b031690816001600160a01b03168152505083816000815181106110245761102461192d565b60209081029190910101526004805460405163400c0e8d60e01b81526001600160a01b039091169163400c0e8d9161106b918691869189916000916107ee91839101611943565b6020604051808303816000875af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611509565b6110ca5760405162461bcd60e51b8152600401610573906118c4565b5050505050565b6001600160a01b03831661111e5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610573565b604051631932052960e11b81526001600160a01b0383166004820152600090734238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa906332640a5290602401602060405180830381865af4158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906114f0565b6040805160018082528183019092529192506000919060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905085826000815181106111fa576111fa61192d565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061122e5761122e61192d565b6020908102919091010152600480546040516219054d60e41b81526001600160a01b039091169163019054d091611274918691869189916000916107ee91839101611943565b6020604051808303816000875af1158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b79190611509565b6112d35760405162461bcd60e51b8152600401610573906118c4565b505050505050565b610560806119ea83390190565b6001600160a01b03811681146108cd57600080fd5b60008083601f84011261130f57600080fd5b50813567ffffffffffffffff81111561132757600080fd5b60208301915083602082850101111561133f57600080fd5b9250929050565b60008060006040848603121561135b57600080fd5b8335611366816112e8565b9250602084013567ffffffffffffffff81111561138257600080fd5b61138e868287016112fd565b9497909650939450505050565b67ffffffffffffffff811681146108cd57600080fd5b60008060008060008060008060c0898b0312156113cd57600080fd5b883561ffff811681146113df57600080fd5b9750602089013567ffffffffffffffff808211156113fc57600080fd5b6114088c838d016112fd565b909950975060408b0135915061141d8261139b565b90955060608a0135945060808a0135935060a08a0135908082111561144157600080fd5b5061144e8b828c016112fd565b999c989b5096995094979396929594505050565b60008060008060006080868803121561147a57600080fd5b8535611485816112e8565b94506020860135935060408601359250606086013567ffffffffffffffff8111156114af57600080fd5b6114bb888289016112fd565b969995985093965092949392505050565b6000602082840312156114de57600080fd5b81356114e9816112e8565b9392505050565b60006020828403121561150257600080fd5b5051919050565b60006020828403121561151b57600080fd5b815180151581146114e957600080fd5b60005b8381101561154657818101518382015260200161152e565b83811115611555576000848401525b50505050565b6000815180845261157381602086016020860161152b565b601f01601f19169290920160200192915050565b600060018060a01b03808351168452806020840151166020850152506040820151606060408501526115bc606085018261155b565b949350505050565b60018060a01b038616815261ffff8516602082015283604082015282606082015260a0608082015260006115fb60a0830184611587565b979650505050505050565b6000806040838503121561161957600080fd5b8235611624816112e8565b9150602083013560ff8116811461163a57600080fd5b809150509250929050565b6000821982111561166657634e487b7160e01b600052601160045260246000fd5b500190565b60018060a01b038716815261ffff8616602082015284604082015283606082015282608082015260c060a082015260006116a860c0830184611587565b98975050505050505050565b600083516116c681846020880161152b565b9190910191825250602001919050565b6001600160f81b031992909216825260601b6bffffffffffffffffffffffff1916600182015260150190565b6001600160a01b03841681526001600160f01b0319831660208201526080604082018190526000906117369083018461155b565b8281036060840152600a81526941737461725a6b45766d60b01b602082015260408101915050949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561178c57600080fd5b815167ffffffffffffffff808211156117a457600080fd5b818401915084601f8301126117b857600080fd5b8151818111156117ca576117ca611764565b604051601f8201601f19908116603f011681019083821181831017156117f2576117f2611764565b8160405282815287602084870101111561180b57600080fd5b6115fb83602083016020880161152b565b602081016004831061183e57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561185757600080fd5b82516118628161139b565b6020939093015192949293505050565b868152851515602082015260018060a01b038516604082015283606082015260c0608082015260006118a760c083018561155b565b905067ffffffffffffffff831660a0830152979650505050505050565b6020808252601290820152714661696c656420746f2073656e642078636d60701b604082015260600190565b6001600160a01b03841681526001600160f01b0319831660208201526060604082018190526000906119249083018461155b565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60c0808252875190820181905260009060209060e0840190828b01845b828110156119855781516001600160a01b031684529284019290840190600101611960565b5050508381038285015288518082528983019183019060005b818110156119ba5783518352928401929184019160010161199e565b505060408501899052871515606086015292506119d5915050565b608082019390935260a0015294935050505056fe6080604052600280546001600160a01b03191673ffffffff0000000000000001000000000000001017905534801561003657600080fd5b506001600081905580546001600160a01b031916331790556105038061005d6000396000f3fe60806040526004361061004e5760003560e01c80630ed205141461005a5780632991e4e61461007c578063722713f7146100b95780638458d2e7146100dc578063e2fda99b146100fc57600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061007a610075366004610430565b610111565b005b34801561008857600080fd5b5060025461009c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100c557600080fd5b506100ce61024e565b6040519081526020016100b0565b3480156100e857600080fd5b5060015461009c906001600160a01b031681565b34801561010857600080fd5b506100ce6102c0565b6101196103d6565b6001546001600160a01b031633146101785760405162461bcd60e51b815260206004820152601d60248201527f44657269766174697665436f6e74726163743a20666f7262696464656e00000060448201526064015b60405180910390fd5b806101955760405162461bcd60e51b815260040161016f90610449565b604051600090339083908381818185875af1925050503d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b50509050806102405760405162461bcd60e51b815260206004820152602a60248201527f44657269766174697665436f6e74726163743a206661696c656420746f2077696044820152693a34323930bba0b9ba3960b11b606482015260840161016f565b5061024b6001600055565b50565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb919061048b565b905090565b60006102ca6103d6565b6001546001600160a01b031633146103245760405162461bcd60e51b815260206004820152601d60248201527f44657269766174697665436f6e74726163743a20666f7262696464656e000000604482015260640161016f565b600061032e61024e565b90508061034d5760405162461bcd60e51b815260040161016f90610449565b60025460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c691906104a4565b5090506103d36001600055565b90565b600260005414156104295760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161016f565b6002600055565b60006020828403121561044257600080fd5b5035919050565b60208082526022908201527f44657269766174697665436f6e74726163743a2062616c616e636520746f206c6040820152616f7760f01b606082015260800190565b60006020828403121561049d57600080fd5b5051919050565b6000602082840312156104b657600080fd5b815180151581146104c657600080fd5b939250505056fea2646970667358221220db101239d811a925d8eb84533d598407f203da45240bb2c20e6668632c5bd62c64736f6c634300080a0033a264697066735822122087bf6482dccf4e877cbe68eafd06814faaccd840d6ef6c36f10469c882903acb64736f6c634300080a0033",
  "deployedBytecode": "0x6080604052600436106100ec5760003560e01c80638da5cb5b1161008a578063c4af1c0b11610059578063c4af1c0b14610266578063c95b6f0e1461029b578063f29588c7146102bb578063f2fde38b146102db57600080fd5b80638da5cb5b146101d25780639641e45e146101f0578063a852ffb614610210578063aae9ecff1461024657600080fd5b8063552a530e116100c6578063552a530e1461016a578063715018a61461018a5780637fcf35da1461019f5780638890f1ce146101bf57600080fd5b806319cd0839146100f85780632991e4e61461013557806352b814b61461015557600080fd5b366100f357005b600080fd5b34801561010457600080fd5b50600554610118906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561014157600080fd5b50600154610118906001600160a01b031681565b610168610163366004611346565b6102fb565b005b34801561017657600080fd5b50600754610118906001600160a01b031681565b34801561019657600080fd5b506101686104e2565b3480156101ab57600080fd5b506101686101ba3660046113b1565b6104f6565b6101686101cd366004611462565b6106e5565b3480156101de57600080fd5b506000546001600160a01b0316610118565b3480156101fc57600080fd5b50600354610118906001600160a01b031681565b34801561021c57600080fd5b5061011861022b3660046114cc565b6008602052600090815260409020546001600160a01b031681565b34801561025257600080fd5b50600454610118906001600160a01b031681565b34801561027257600080fd5b5060075461028890600160a01b900461ffff1681565b60405161ffff909116815260200161012c565b3480156102a757600080fd5b50600654610118906001600160a01b031681565b3480156102c757600080fd5b50600254610118906001600160a01b031681565b3480156102e757600080fd5b506101686102f63660046114cc565b610857565b6001600160a01b03808416600090815260086020908152604080832054815163e2fda99b60e01b815291519394169263e2fda99b92600480840193919291829003018187875af1158015610353573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037791906114f0565b60015460065460405163095ea7b360e01b81526001600160a01b03918216600482015260248101849052929350169063095ea7b3906044016020604051808303816000875af11580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190611509565b50600060405180606001604052806104073390565b6001600160a01b0316815260200160006001600160a01b0316815260200185858080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250505091525060065460075460405163695ef6bf60e01b81529293506001600160a01b039182169263695ef6bf9234926104a9923092600160a01b90920461ffff16918c1690899089906004016115c4565b6000604051808303818588803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b50505050505050505050565b6104ea6108d0565b6104f4600061092a565b565b6005546001600160a01b0316336001600160a01b0316148061052b57506006546001600160a01b0316336001600160a01b0316145b61057c5760405162461bcd60e51b815260206004820152601860248201527f6f6e6c79206e6174697665206f66742063616e2063616c6c000000000000000060448201526064015b60405180910390fd5b6007546001600160a01b038581169116146105e35760405162461bcd60e51b815260206004820152602160248201527f6f6e6c792072656365697665206d73672066726f6d2061737461725a6b536c706044820152600f60fb1b6064820152608401610573565b6000806105f283850185611606565b6001600160a01b0380831660009081526008602052604090205492945090925016610620576106208261097a565b60ff81166106b257600554604051632e1a7d4d60e01b8152600481018790526001600160a01b0390911690632e1a7d4d90602401600060405180830381600087803b15801561066e57600080fd5b505af1158015610682573d6000803e3d6000fd5b5050506001600160a01b038084166000908152600860205260409020546106ad925084911687610a12565b6104d6565b8060ff16600114156104d6576001600160a01b038083166000908152600860205260409020546104d69184911687610d27565b6001600160a01b03858116600090815260086020526040908190205490516303b4814560e21b815260048101879052911690630ed2051490602401600060405180830381600087803b15801561073a57600080fd5b505af115801561074e573d6000803e3d6000fd5b50505050600060405180606001604052806107663390565b6001600160a01b0316815260200160006001600160a01b0316815260200184848080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509152506005549091506001600160a01b0316632cdf0b956107da3488611645565b60075460405160e084901b6001600160e01b031916815261081d913091600160a01b90910461ffff16906001600160a01b038d16908c908c908a9060040161166b565b6000604051808303818588803b15801561083657600080fd5b505af115801561084a573d6000803e3d6000fd5b5050505050505050505050565b61085f6108d0565b6001600160a01b0381166108c45760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610573565b6108cd8161092a565b50565b6000546001600160a01b031633146104f45760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610573565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006040518060200161098c906112db565b601f1982820381018352601f9091011660408190529091506001600160a01b038316906000906109c290849084906020016116b4565b60405160208183030381529060405290506000828251602084016000f56001600160a01b03958616600090815260086020526040902080546001600160a01b031916919096161790945550505050565b6001600160a01b038316610a685760405162461bcd60e51b815260206004820152601960248201527f4d696e743a205f66726f6d20213d2061646472657373283029000000000000006044820152606401610573565b6001600160a01b038216610abe5760405162461bcd60e51b815260206004820152601760248201527f4d696e743a205f746f20213d20616464726573732830290000000000000000006044820152606401610573565b80610b005760405162461bcd60e51b815260206004820152601260248201527104d696e743a205f616d6f756e7420213d20360741b6044820152606401610573565b610b0a8382610f13565b604051600090610b2090829085906020016116d6565b60408051601f198184030181529082905263b921552760e01b8252915060009073__$e184f4046250cd750dfdb139628ab13bdc$__9063b921552790610b7390889061080360f01b908790600401611702565b600060405180830381865af4158015610b90573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bb8919081019061177a565b600354604051635eef7b0d60e11b815291925060009182916001600160a01b03169063bddef61a90610bee90849060040161181c565b6040805180830381865afa158015610c0a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c2e9190611844565b60048054600254604051637c87590960e11b81529496509294506001600160a01b039081169363f90eb21293610c74936107ee9360009392169188918b918b9101611872565b6020604051808303816000875af1158015610c93573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb79190611509565b610cd35760405162461bcd60e51b8152600401610573906118c4565b604080516001600160a01b03808a168252881660208201529081018690527fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f89060600160405180910390a150505050505050565b6001600160a01b038316610d7d5760405162461bcd60e51b815260206004820152601b60248201527f52656465656d3a205f66726f6d20213d206164647265737328302900000000006044820152606401610573565b6001600160a01b038216610dd35760405162461bcd60e51b815260206004820152601960248201527f52656465656d3a205f746f20213d2061646472657373283029000000000000006044820152606401610573565b80610e175760405162461bcd60e51b8152602060048201526014602482015273052656465656d3a205f616d6f756e7420213d20360641b6044820152606401610573565b600154610e2e906001600160a01b031684836110d1565b604051600090610e4490829085906020016116d6565b60408051601f1981840301815290829052639f00478360e01b8252915060009073__$e184f4046250cd750dfdb139628ab13bdc$__90639f00478390610e9790889061090360f01b9087906004016118f0565b600060405180830381865af4158015610eb4573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610edc919081019061177a565b600354604051635eef7b0d60e11b815291925060009182916001600160a01b03169063bddef61a90610bee9060019060040161181c565b604051631932052960e11b81526001600160a01b038316600482015260009073__$ddfb0e6c1c4d05795fcce73a90830b0995$__906332640a5290602401602060405180830381865af4158015610f6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9291906114f0565b60408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050600082600081518110610ff057610ff061192d565b60200260200101906001600160a01b031690816001600160a01b03168152505083816000815181106110245761102461192d565b60209081029190910101526004805460405163400c0e8d60e01b81526001600160a01b039091169163400c0e8d9161106b918691869189916000916107ee91839101611943565b6020604051808303816000875af115801561108a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110ae9190611509565b6110ca5760405162461bcd60e51b8152600401610573906118c4565b5050505050565b6001600160a01b03831661111e5760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610573565b604051631932052960e11b81526001600160a01b038316600482015260009073__$ddfb0e6c1c4d05795fcce73a90830b0995$__906332640a5290602401602060405180830381865af4158015611179573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d91906114f0565b6040805160018082528183019092529192506000919060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905085826000815181106111fa576111fa61192d565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061122e5761122e61192d565b6020908102919091010152600480546040516219054d60e41b81526001600160a01b039091169163019054d091611274918691869189916000916107ee91839101611943565b6020604051808303816000875af1158015611293573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b79190611509565b6112d35760405162461bcd60e51b8152600401610573906118c4565b505050505050565b610560806119ea83390190565b6001600160a01b03811681146108cd57600080fd5b60008083601f84011261130f57600080fd5b50813567ffffffffffffffff81111561132757600080fd5b60208301915083602082850101111561133f57600080fd5b9250929050565b60008060006040848603121561135b57600080fd5b8335611366816112e8565b9250602084013567ffffffffffffffff81111561138257600080fd5b61138e868287016112fd565b9497909650939450505050565b67ffffffffffffffff811681146108cd57600080fd5b60008060008060008060008060c0898b0312156113cd57600080fd5b883561ffff811681146113df57600080fd5b9750602089013567ffffffffffffffff808211156113fc57600080fd5b6114088c838d016112fd565b909950975060408b0135915061141d8261139b565b90955060608a0135945060808a0135935060a08a0135908082111561144157600080fd5b5061144e8b828c016112fd565b999c989b5096995094979396929594505050565b60008060008060006080868803121561147a57600080fd5b8535611485816112e8565b94506020860135935060408601359250606086013567ffffffffffffffff8111156114af57600080fd5b6114bb888289016112fd565b969995985093965092949392505050565b6000602082840312156114de57600080fd5b81356114e9816112e8565b9392505050565b60006020828403121561150257600080fd5b5051919050565b60006020828403121561151b57600080fd5b815180151581146114e957600080fd5b60005b8381101561154657818101518382015260200161152e565b83811115611555576000848401525b50505050565b6000815180845261157381602086016020860161152b565b601f01601f19169290920160200192915050565b600060018060a01b03808351168452806020840151166020850152506040820151606060408501526115bc606085018261155b565b949350505050565b60018060a01b038616815261ffff8516602082015283604082015282606082015260a0608082015260006115fb60a0830184611587565b979650505050505050565b6000806040838503121561161957600080fd5b8235611624816112e8565b9150602083013560ff8116811461163a57600080fd5b809150509250929050565b6000821982111561166657634e487b7160e01b600052601160045260246000fd5b500190565b60018060a01b038716815261ffff8616602082015284604082015283606082015282608082015260c060a082015260006116a860c0830184611587565b98975050505050505050565b600083516116c681846020880161152b565b9190910191825250602001919050565b6001600160f81b031992909216825260601b6bffffffffffffffffffffffff1916600182015260150190565b6001600160a01b03841681526001600160f01b0319831660208201526080604082018190526000906117369083018461155b565b8281036060840152600a81526941737461725a6b45766d60b01b602082015260408101915050949350505050565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561178c57600080fd5b815167ffffffffffffffff808211156117a457600080fd5b818401915084601f8301126117b857600080fd5b8151818111156117ca576117ca611764565b604051601f8201601f19908116603f011681019083821181831017156117f2576117f2611764565b8160405282815287602084870101111561180b57600080fd5b6115fb83602083016020880161152b565b602081016004831061183e57634e487b7160e01b600052602160045260246000fd5b91905290565b6000806040838503121561185757600080fd5b82516118628161139b565b6020939093015192949293505050565b868152851515602082015260018060a01b038516604082015283606082015260c0608082015260006118a760c083018561155b565b905067ffffffffffffffff831660a0830152979650505050505050565b6020808252601290820152714661696c656420746f2073656e642078636d60701b604082015260600190565b6001600160a01b03841681526001600160f01b0319831660208201526060604082018190526000906119249083018461155b565b95945050505050565b634e487b7160e01b600052603260045260246000fd5b60c0808252875190820181905260009060209060e0840190828b01845b828110156119855781516001600160a01b031684529284019290840190600101611960565b5050508381038285015288518082528983019183019060005b818110156119ba5783518352928401929184019160010161199e565b505060408501899052871515606086015292506119d5915050565b608082019390935260a0015294935050505056fe6080604052600280546001600160a01b03191673ffffffff0000000000000001000000000000001017905534801561003657600080fd5b506001600081905580546001600160a01b031916331790556105038061005d6000396000f3fe60806040526004361061004e5760003560e01c80630ed205141461005a5780632991e4e61461007c578063722713f7146100b95780638458d2e7146100dc578063e2fda99b146100fc57600080fd5b3661005557005b600080fd5b34801561006657600080fd5b5061007a610075366004610430565b610111565b005b34801561008857600080fd5b5060025461009c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100c557600080fd5b506100ce61024e565b6040519081526020016100b0565b3480156100e857600080fd5b5060015461009c906001600160a01b031681565b34801561010857600080fd5b506100ce6102c0565b6101196103d6565b6001546001600160a01b031633146101785760405162461bcd60e51b815260206004820152601d60248201527f44657269766174697665436f6e74726163743a20666f7262696464656e00000060448201526064015b60405180910390fd5b806101955760405162461bcd60e51b815260040161016f90610449565b604051600090339083908381818185875af1925050503d80600081146101d7576040519150601f19603f3d011682016040523d82523d6000602084013e6101dc565b606091505b50509050806102405760405162461bcd60e51b815260206004820152602a60248201527f44657269766174697665436f6e74726163743a206661696c656420746f2077696044820152693a34323930bba0b9ba3960b11b606482015260840161016f565b5061024b6001600055565b50565b6002546040516370a0823160e01b81523060048201526000916001600160a01b0316906370a0823190602401602060405180830381865afa158015610297573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bb919061048b565b905090565b60006102ca6103d6565b6001546001600160a01b031633146103245760405162461bcd60e51b815260206004820152601d60248201527f44657269766174697665436f6e74726163743a20666f7262696464656e000000604482015260640161016f565b600061032e61024e565b90508061034d5760405162461bcd60e51b815260040161016f90610449565b60025460015460405163a9059cbb60e01b81526001600160a01b0391821660048201526024810184905291169063a9059cbb906044016020604051808303816000875af11580156103a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c691906104a4565b5090506103d36001600055565b90565b600260005414156104295760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161016f565b6002600055565b60006020828403121561044257600080fd5b5035919050565b60208082526022908201527f44657269766174697665436f6e74726163743a2062616c616e636520746f206c6040820152616f7760f01b606082015260800190565b60006020828403121561049d57600080fd5b5051919050565b6000602082840312156104b657600080fd5b815180151581146104c657600080fd5b939250505056fea2646970667358221220db101239d811a925d8eb84533d598407f203da45240bb2c20e6668632c5bd62c64736f6c634300080a0033a264697066735822122087bf6482dccf4e877cbe68eafd06814faaccd840d6ef6c36f10469c882903acb64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0x4238Ea4AdFa2bD6a5fC9B5E245dc1900cF0258aa",
    "BuildCallData": "0x051713fD66845a13BF23BACa008C5C22C27Ccb58"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 818,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1143,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "VASTR",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 1146,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "BNC",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 1149,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "astarSlpx",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 1152,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "polkadotXcm",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 1155,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "astrNativeOFT",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 1158,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "vAstrProxyOFT",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 1160,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "astarZkSlpx",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 1163,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "destChainId",
        "offset": 20,
        "slot": "7",
        "type": "t_uint16"
      },
      {
        "astId": 1167,
        "contract": "contracts/AstarReceiver.sol:AstarReceiver",
        "label": "derivativeAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_address)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      }
    }
  }
}