{
  "address": "0x294c664f6D63bd1521231a2EeFC26d805ce00a08",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "swapper",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "callcode",
          "type": "bytes"
        }
      ],
      "name": "Swap",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ASTAR_CHAIN",
      "outputs": [
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ASTR_BYTES",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "",
          "type": "bytes2"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BIFROST_PARA_ID",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BNC_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NATIVE_ASSET_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VASTR_BYTES",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "",
          "type": "bytes2"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "XCM_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAddressToCurrencyId",
      "outputs": [
        {
          "internalType": "bytes2",
          "name": "",
          "type": "bytes2"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetAddressToMinimumValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "bifrostTransactionFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bifrostTransactionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_transactWeight",
          "type": "uint64"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mintVAsset",
      "outputs": [],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mintVNativeAsset",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vAssetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "bytes2",
          "name": "currencyId",
          "type": "bytes2"
        }
      ],
      "name": "setAssetAddressToCurrencyId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "minimumValue",
          "type": "uint256"
        }
      ],
      "name": "setAssetAddressToMinimumValue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_bifrostTransactionFee",
          "type": "uint256"
        },
        {
          "internalType": "uint64",
          "name": "_transactWeight",
          "type": "uint64"
        }
      ],
      "name": "setBifrostTransactionFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetInAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "assetInAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapAssetsForExactNativeAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "assetOutAddress",
          "type": "address"
        },
        {
          "internalType": "uint128",
          "name": "assetOutMin",
          "type": "uint128"
        }
      ],
      "name": "swapNativeAssetsForExactAssets",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transactWeight",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x37c1700802423092561e120c40a302e5fad80f2de296395940e4c80c157f7135",
  "receipt": {
    "to": null,
    "from": "0xf24FF3a9CF04c71Dbc94D0b566f7A27B94566cac",
    "contractAddress": "0x294c664f6D63bd1521231a2EeFC26d805ce00a08",
    "transactionIndex": 0,
    "gasUsed": "1769450",
    "logsBloom": "0x
    "blockHash": "0x7f9e119f62ae3aeff9cef22c69d4e8dbe70336a54a86d32073aa2787e67b8f69",
    "transactionHash": "0x37c1700802423092561e120c40a302e5fad80f2de296395940e4c80c157f7135",
    "logs": [],
    "blockNumber": 1593053,
    "cumulativeGasUsed": "1769450",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8476cc78c39988e827a15a8cc5a29359",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"swapper\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"callcode\",\"type\":\"bytes\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ASTAR_CHAIN\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ASTR_BYTES\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BIFROST_PARA_ID\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BNC_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NATIVE_ASSET_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VASTR_BYTES\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"XCM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAddressToCurrencyId\",\"outputs\":[{\"internalType\":\"bytes2\",\"name\":\"\",\"type\":\"bytes2\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetAddressToMinimumValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"bifrostTransactionFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bifrostTransactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_transactWeight\",\"type\":\"uint64\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mintVAsset\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mintVNativeAsset\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vAssetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"bytes2\",\"name\":\"currencyId\",\"type\":\"bytes2\"}],\"name\":\"setAssetAddressToCurrencyId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"minimumValue\",\"type\":\"uint256\"}],\"name\":\"setAssetAddressToMinimumValue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_bifrostTransactionFee\",\"type\":\"uint256\"},{\"internalType\":\"uint64\",\"name\":\"_transactWeight\",\"type\":\"uint64\"}],\"name\":\"setBifrostTransactionFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetInAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"assetInAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapAssetsForExactNativeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"assetOutAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"assetOutMin\",\"type\":\"uint128\"}],\"name\":\"swapNativeAssetsForExactAssets\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transactWeight\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"mintVNativeAsset()\":{\"notice\":\"Minted vNative assets such as vASTR, vGLMR, vMOVR\"},\"redeemAsset(address,uint256)\":{\"notice\":\"Redeem assets\"},\"swapAssetsForExactAssets(address,address,uint256,uint128)\":{\"notice\":\"Swap one asset for another\"},\"swapAssetsForExactNativeAssets(address,uint256,uint128)\":{\"notice\":\"Swap one asset for native asset\"},\"swapNativeAssetsForExactAssets(address,uint128)\":{\"notice\":\"Swap native asset for another\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AstarSlpx.sol\":\"AstarSlpx\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x4075622496acc77fd6d4de4cc30a8577a744d5c75afad33fdeacf1704d6eda98\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity 0.8.10;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal onlyInitializing {\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal onlyInitializing {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x40c636b4572ff5f1dc50cf22097e93c0723ee14eff87e99ac2b02636eeca1250\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity 0.8.10;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x963ea7f0b48b032eef72fe3a7582edf78408d6f834115b9feadd673a4d5bd149\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity 0.8.10;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"contracts/AstarSlpx.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol\\\";\\nimport \\\"./interfaces/XCM.sol\\\";\\nimport \\\"./interfaces/IXcmAction.sol\\\";\\nimport \\\"./utils/BuildCallData.sol\\\";\\nimport \\\"./utils/AddressToAccount.sol\\\";\\n\\ncontract AstarSlpx is IXcmAction, OwnableUpgradeable, PausableUpgradeable {\\n    address public constant NATIVE_ASSET_ADDRESS =\\n        0x0000000000000000000000000000000000000000;\\n//    address public constant BNC_ADDRESS =\\n//        0xfFffFffF00000000000000010000000000000007;\\n    address public constant BNC_ADDRESS =\\n    0xfFFFFfFf00000000000000010000000000000002;\\n    address public constant XCM_ADDRESS =\\n        0x0000000000000000000000000000000000005004;\\n    bytes2 public constant ASTR_BYTES = 0x0803;\\n    bytes2 public constant VASTR_BYTES = 0x0903;\\n    bytes1 public constant ASTAR_CHAIN = 0x00;\\n    uint32 public constant BIFROST_PARA_ID = 2030;\\n\\n    uint256 public bifrostTransactionFee;\\n    uint64 public transactWeight;\\n\\n    mapping(address => bytes2) public assetAddressToCurrencyId;\\n    mapping(address => uint256) public assetAddressToMinimumValue;\\n\\n    function initialize(\\n        uint256 _bifrostTransactionFee,\\n        uint64 _transactWeight\\n    ) public initializer {\\n        super.__Ownable_init();\\n        super.__Pausable_init();\\n        setBifrostTransactionFee(_bifrostTransactionFee, _transactWeight);\\n    }\\n\\n    function setBifrostTransactionFee(\\n        uint256 _bifrostTransactionFee,\\n        uint64 _transactWeight\\n    ) public onlyOwner {\\n        require(\\n            _bifrostTransactionFee <= 1000000000000,\\n            \\\"Transaction Fee too large\\\"\\n        );\\n        require(_transactWeight <= 10000000000, \\\"TransactWeight too large\\\");\\n        bifrostTransactionFee = _bifrostTransactionFee;\\n        transactWeight = _transactWeight;\\n    }\\n\\n    function setAssetAddressToMinimumValue(\\n        address assetAddress,\\n        uint256 minimumValue\\n    ) public onlyOwner {\\n        assetAddressToMinimumValue[assetAddress] = minimumValue;\\n    }\\n\\n    function setAssetAddressToCurrencyId(\\n        address assetAddress,\\n        bytes2 currencyId\\n    ) public onlyOwner {\\n        require(currencyId != bytes2(0), \\\"Invalid currencyId\\\");\\n        assetAddressToCurrencyId[assetAddress] = currencyId;\\n    }\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function xcmTransferAsset(address assetAddress, uint256 amount) internal {\\n        require(assetAddress != address(0), \\\"Invalid assetAddress\\\");\\n        require(\\n            assetAddressToMinimumValue[assetAddress] <= amount,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        IERC20 erc20 = IERC20(assetAddress);\\n        erc20.transferFrom(_msgSender(), address(this), amount);\\n        assetId[0] = assetAddress;\\n        assetAmount[0] = amount;\\n        XCM(XCM_ADDRESS).assets_withdraw(\\n            assetId,\\n            assetAmount,\\n            publicKey,\\n            false,\\n            BIFROST_PARA_ID,\\n            0\\n        );\\n    }\\n\\n    function xcmTransferNativeAsset(uint256 amount) internal {\\n        require(\\n            assetAddressToMinimumValue[NATIVE_ASSET_ADDRESS] <= amount,\\n            \\\"Less than MinimumValue\\\"\\n        );\\n        bytes32 publicKey = AddressToAccount.AddressToSubstrateAccount(\\n            _msgSender()\\n        );\\n        address[] memory assetId = new address[](1);\\n        uint256[] memory assetAmount = new uint256[](1);\\n        assetId[0] = NATIVE_ASSET_ADDRESS;\\n        assetAmount[0] = amount;\\n        XCM(XCM_ADDRESS).assets_reserve_transfer(\\n            assetId,\\n            assetAmount,\\n            publicKey,\\n            false,\\n            BIFROST_PARA_ID,\\n            0\\n        );\\n    }\\n\\n    function mintVNativeAsset() external payable override whenNotPaused {\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory callcode = BuildCallData.buildMintCallBytes(\\n            _msgSender(),\\n            ASTR_BYTES,\\n            ASTAR_CHAIN\\n        );\\n\\n        // xcm transact\\n        XCM(XCM_ADDRESS).remote_transact(\\n            BIFROST_PARA_ID,\\n            false,\\n            BNC_ADDRESS,\\n            bifrostTransactionFee,\\n            callcode,\\n            transactWeight\\n        );\\n        emit Mint(_msgSender(), NATIVE_ASSET_ADDRESS, msg.value, callcode);\\n    }\\n\\n    function mintVAsset(address, uint256) external pure override {\\n        require(false, \\\"Not support\\\");\\n    }\\n\\n    function redeemAsset(\\n        address vAssetAddress,\\n        uint256 amount\\n    ) external override whenNotPaused {\\n        bytes2 vtoken = assetAddressToCurrencyId[vAssetAddress];\\n        require(vtoken == VASTR_BYTES, \\\"Not support\\\");\\n\\n        xcmTransferAsset(vAssetAddress, amount);\\n\\n        bytes memory callcode = BuildCallData.buildRedeemCallBytes(\\n            _msgSender(),\\n            vtoken,\\n            ASTAR_CHAIN\\n        );\\n        // xcm transact\\n        XCM(XCM_ADDRESS).remote_transact(\\n            BIFROST_PARA_ID,\\n            false,\\n            BNC_ADDRESS,\\n            bifrostTransactionFee,\\n            callcode,\\n            transactWeight\\n        );\\n        emit Redeem(_msgSender(), vAssetAddress, amount, callcode);\\n    }\\n\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\\n        require(\\n            assetIn != bytes2(0) && assetOut != bytes2(0),\\n            \\\"Invalid currencyId\\\"\\n        );\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        bytes memory callcode = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            assetOut,\\n            assetOutMin,\\n            ASTAR_CHAIN\\n        );\\n        // xcm transact\\n        XCM(XCM_ADDRESS).remote_transact(\\n            BIFROST_PARA_ID,\\n            false,\\n            BNC_ADDRESS,\\n            bifrostTransactionFee,\\n            callcode,\\n            transactWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            assetOutAddress,\\n            assetInAmount,\\n            assetOutMin,\\n            callcode\\n        );\\n    }\\n\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external override whenNotPaused {\\n        bytes2 assetIn = assetAddressToCurrencyId[assetInAddress];\\n        require(assetIn != bytes2(0), \\\"Invalid assetIn\\\");\\n\\n        xcmTransferAsset(assetInAddress, assetInAmount);\\n\\n        bytes memory callcode = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            assetIn,\\n            ASTR_BYTES,\\n            assetOutMin,\\n            ASTAR_CHAIN\\n        );\\n        // xcm transact\\n        XCM(XCM_ADDRESS).remote_transact(\\n            BIFROST_PARA_ID,\\n            false,\\n            BNC_ADDRESS,\\n            bifrostTransactionFee,\\n            callcode,\\n            transactWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            assetInAddress,\\n            NATIVE_ASSET_ADDRESS,\\n            assetInAmount,\\n            assetOutMin,\\n            callcode\\n        );\\n    }\\n\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin\\n    ) external payable override whenNotPaused {\\n        bytes2 assetOut = assetAddressToCurrencyId[assetOutAddress];\\n        require(assetOut != bytes2(0), \\\"Invalid assetOut\\\");\\n\\n        xcmTransferNativeAsset(msg.value);\\n\\n        bytes memory callcode = BuildCallData.buildSwapCallBytes(\\n            _msgSender(),\\n            ASTR_BYTES,\\n            assetOut,\\n            assetOutMin,\\n            ASTAR_CHAIN\\n        );\\n        // xcm transact\\n        XCM(XCM_ADDRESS).remote_transact(\\n            BIFROST_PARA_ID,\\n            false,\\n            BNC_ADDRESS,\\n            bifrostTransactionFee,\\n            callcode,\\n            transactWeight\\n        );\\n        emit Swap(\\n            _msgSender(),\\n            NATIVE_ASSET_ADDRESS,\\n            assetOutAddress,\\n            msg.value,\\n            assetOutMin,\\n            callcode\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xafc234aae8e2859ae23d89a496e1cf69ff8f8e6d1bd060f4a77d58f0c7a7c459\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/IXcmAction.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\ninterface IXcmAction {\\n    event Mint(\\n        address minter,\\n        address assetAddress,\\n        uint256 amount,\\n        bytes callcode\\n    );\\n    event Redeem(\\n        address redeemer,\\n        address assetAddress,\\n        uint256 amount,\\n        bytes callcode\\n    );\\n    event Swap(\\n        address swapper,\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin,\\n        bytes callcode\\n    );\\n\\n    /// Minted vNative assets such as vASTR, vGLMR, vMOVR\\n    function mintVNativeAsset() external payable;\\n\\n    /// Minted vAssets\\n    function mintVAsset(address assetAddress, uint256 amount) external;\\n\\n    /// Redeem assets\\n    function redeemAsset(address vAssetAddress, uint256 amount) external;\\n\\n    /// Swap one asset for another\\n    function swapAssetsForExactAssets(\\n        address assetInAddress,\\n        address assetOutAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external;\\n\\n    /// Swap one asset for native asset\\n    function swapAssetsForExactNativeAssets(\\n        address assetInAddress,\\n        uint256 assetInAmount,\\n        uint128 assetOutMin\\n    ) external;\\n\\n    /// Swap native asset for another\\n    function swapNativeAssetsForExactAssets(\\n        address assetOutAddress,\\n        uint128 assetOutMin\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x808527ac06f86a060a8e23e57722b3d6a02f494ce508cd6d12716866f68f9842\",\"license\":\"Apache-2.0\"},\"contracts/interfaces/XCM.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\n/**\\n * @title XCM interface.\\n */\\ninterface XCM {\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Withdraw assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as reserve\\n     * @param parachain_id - set parachain id of reserve parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return bool confirmation whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_withdraw(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Execute a transaction on a remote chain.\\n     * @param parachain_id - destination parachain Id (ignored if is_relay is true)\\n     * @param is_relay - if true, destination is relay_chain, if false it is parachain (see previous argument)\\n     * @param payment_asset_id - ETH address of the local asset derivate used to pay for execution in the destination chain\\n     * @param payment_amount - amount of payment asset to use for execution payment - should cover cost of XCM instructions + Transact call weight.\\n     * @param call - encoded call data (must be decodable by remote chain)\\n     * @param transact_weight - max weight that the encoded call is allowed to consume in the destination chain\\n     * @return bool confirmation whether the XCM message sent.\\n     */\\n    function remote_transact(\\n        uint256 parachain_id,\\n        bool is_relay,\\n        address payment_asset_id,\\n        uint256 payment_amount,\\n        bytes calldata call,\\n        uint64 transact_weight\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer assets using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - SS58 public key of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        bytes32 recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Reserve transfer using PalletXCM call.\\n     * @param asset_id - list of XC20 asset addresses\\n     * @param asset_amount - list of transfer amounts (must match with asset addresses above)\\n     * @param recipient_account_id - ETH address of the destination account\\n     * @param is_relay - set `true` for using relay chain as destination\\n     * @param parachain_id - set parachain id of destination parachain (when is_relay set to false)\\n     * @param fee_index - index of asset_id item that should be used as a XCM fee\\n     * @return A boolean confirming whether the XCM message sent.\\n     *\\n     * How method check that assets list is valid:\\n     * - all assets resolved to multi-location (on runtime level)\\n     * - all assets has corresponded amount (lenght of assets list matched to amount list)\\n     */\\n    function assets_reserve_transfer(\\n        address[] calldata asset_id,\\n        uint256[] calldata asset_amount,\\n        address recipient_account_id,\\n        bool is_relay,\\n        uint256 parachain_id,\\n        uint256 fee_index\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x778536956fcd175874b1b4f385a46d1743aeff83f73a6ab40e3b3338b3109291\",\"license\":\"Apache-2.0\"},\"contracts/utils/AddressToAccount.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nimport \\\"./Blake2b.sol\\\";\\n\\nlibrary AddressToAccount {\\n    using Blake2b for Blake2b.Instance;\\n\\n    function blake2bHash(bytes memory src) public view returns (bytes32 des) {\\n        Blake2b.Instance memory instance = Blake2b.init(hex\\\"\\\", 32);\\n        return abi.decode(instance.finalize(src), (bytes32));\\n    }\\n\\n    function AddressToSubstrateAccount(\\n        address addr\\n    ) public view returns (bytes32 account) {\\n        bytes memory prefix = bytes(\\\"evm:\\\");\\n        bytes memory addrBytes = abi.encodePacked(addr);\\n        bytes memory data = abi.encodePacked(prefix, addrBytes);\\n        return blake2bHash(data);\\n    }\\n}\\n\",\"keccak256\":\"0xfa01044cb7e521da112383416c0f7772eba453695dff7527c7baa8329282c9ab\",\"license\":\"Apache-2.0\"},\"contracts/utils/Blake2b.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\npragma experimental ABIEncoderV2;\\n\\nlibrary Blake2b {\\n    struct Instance {\\n        // This is a bit misleadingly called state as it not only includes the Blake2 state,\\n        // but every field needed for the \\\"blake2 f function precompile\\\".\\n        //\\n        // This is a tightly packed buffer of:\\n        // - rounds: 32-bit BE\\n        // - h: 8 x 64-bit LE\\n        // - m: 16 x 64-bit LE\\n        // - t: 2 x 64-bit LE\\n        // - f: 8-bit\\n        bytes state;\\n        // Expected output hash length. (Used in `finalize`.)\\n        uint out_len;\\n        // Data passed to \\\"function F\\\".\\n        // NOTE: this is limited to 24 bits.\\n        uint input_counter;\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function init(\\n        bytes memory key,\\n        uint out_len\\n    ) internal view returns (Instance memory instance) {\\n        reset(instance, key, out_len);\\n    }\\n\\n    // Initialise the state with a given `key` and required `out_len` hash length.\\n    function reset(\\n        Instance memory instance,\\n        bytes memory key,\\n        uint out_len\\n    ) internal view {\\n        instance.out_len = out_len;\\n        instance.input_counter = 0;\\n\\n        // This is entire state transmitted to the precompile.\\n        // It is byteswapped for the encoding requirements, additionally\\n        // the IV has the initial parameter block 0 XOR constant applied, but\\n        // not the key and output length.\\n        instance\\n            .state = hex\\\"0000000c08c9bdf267e6096a3ba7ca8485ae67bb2bf894fe72f36e3cf1361d5f3af54fa5d182e6ad7f520e511f6c3e2b8c68059b6bbd41fbabd9831f79217e1319cde05b00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\\\";\\n        bytes memory state = instance.state;\\n\\n        // Update parameter block 0 with key length and output length.\\n        uint key_len = key.length;\\n        assembly {\\n            let ptr := add(state, 36)\\n            let tmp := mload(ptr)\\n            let p0 := or(shl(240, key_len), shl(248, out_len))\\n            tmp := xor(tmp, p0)\\n            mstore(ptr, tmp)\\n        }\\n\\n        // TODO: support salt and personalization\\n\\n        if (key_len > 0) {\\n            require(key_len == 64);\\n            // FIXME: the key must be zero padded\\n            assert(key.length == 128);\\n            update(instance, key, key_len);\\n        }\\n    }\\n\\n    // This calls the blake2 precompile (\\\"function F of the spec\\\").\\n    // It expects the state was updated with the next block. Upon returning the state will be updated,\\n    // but the supplied block data will not be cleared.\\n    function call_function_f(Instance memory instance) private view {\\n        bytes memory state = instance.state;\\n        assembly {\\n            let state_ptr := add(state, 32)\\n            if iszero(\\n                staticcall(\\n                    not(0),\\n                    0x09,\\n                    state_ptr,\\n                    0xd5,\\n                    add(state_ptr, 4),\\n                    0x40\\n                )\\n            ) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n\\n    // This function will split blocks correctly and repeatedly call the precompile.\\n    // NOTE: this is dumb right now and expects `data` to be 128 bytes long and padded with zeroes,\\n    //       hence the real length is indicated with `data_len`\\n    function update_loop(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len,\\n        bool last_block\\n    ) private view {\\n        bytes memory state = instance.state;\\n        uint input_counter = instance.input_counter;\\n\\n        // This is the memory location where the \\\"data block\\\" starts for the precompile.\\n        uint state_ptr;\\n        assembly {\\n            // The `rounds` field is 4 bytes long and the `h` field is 64-bytes long.\\n            // Also adjust for the size of the bytes type.\\n            state_ptr := add(state, 100)\\n        }\\n\\n        // This is the memory location where the input data resides.\\n        uint data_ptr;\\n        assembly {\\n            data_ptr := add(data, 32)\\n        }\\n\\n        uint len = data.length;\\n        while (len > 0) {\\n            if (len >= 128) {\\n                assembly {\\n                    mstore(state_ptr, mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 32), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 64), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n\\n                    mstore(add(state_ptr, 96), mload(data_ptr))\\n                    data_ptr := add(data_ptr, 32)\\n                }\\n\\n                len -= 128;\\n                // FIXME: remove this once implemented proper padding\\n                if (data_len < 128) {\\n                    input_counter += data_len;\\n                } else {\\n                    data_len -= 128;\\n                    input_counter += 128;\\n                }\\n            } else {\\n                // FIXME: implement support for smaller than 128 byte blocks\\n                revert();\\n            }\\n\\n            // Set length field (little-endian) for maximum of 24-bits.\\n            assembly {\\n                mstore8(add(state, 228), and(input_counter, 0xff))\\n                mstore8(add(state, 229), and(shr(8, input_counter), 0xff))\\n                mstore8(add(state, 230), and(shr(16, input_counter), 0xff))\\n            }\\n\\n            // Set the last block indicator.\\n            // Only if we've processed all input.\\n            if (len == 0) {\\n                assembly {\\n                    // Writing byte 212 here.\\n                    mstore8(add(state, 244), last_block)\\n                }\\n            }\\n\\n            // Call the precompile\\n            call_function_f(instance);\\n        }\\n\\n        instance.input_counter = input_counter;\\n    }\\n\\n    // Update the state with a non-final block.\\n    // NOTE: the input must be complete blocks.\\n    function update(\\n        Instance memory instance,\\n        bytes memory data,\\n        uint data_len\\n    ) internal view {\\n        require((data.length % 128) == 0);\\n        update_loop(instance, data, data_len, false);\\n    }\\n\\n    // Update the state with a final block and return the hash.\\n    function finalize(\\n        Instance memory instance,\\n        bytes memory data\\n    ) internal view returns (bytes memory output) {\\n        // FIXME: support incomplete blocks (zero pad them)\\n        uint input_length = data.length;\\n        if (input_length == 0 || (input_length % 128) != 0) {\\n            data = abi.encodePacked(\\n                data,\\n                new bytes(128 - (input_length % 128))\\n            );\\n        }\\n        assert((data.length % 128) == 0);\\n        update_loop(instance, data, input_length, true);\\n\\n        // FIXME: support other lengths\\n        // assert(instance.out_len == 64);\\n\\n        bytes memory state = instance.state;\\n        output = new bytes(instance.out_len);\\n        if (instance.out_len == 16) {\\n            assembly {\\n                mstore(add(output, 16), mload(add(state, 20)))\\n                mstore(output, 16)\\n            }\\n        } else if (instance.out_len == 32) {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n            }\\n        } else {\\n            assembly {\\n                mstore(add(output, 32), mload(add(state, 36)))\\n                mstore(add(output, 64), mload(add(state, 68)))\\n            }\\n        }\\n    }\\n\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    ) internal pure returns (bytes memory) {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0xa1d82bbed563d73f2e0d99477a3fb774d4fddba2a8f4a066681b6e4856f60016\",\"license\":\"Apache-2.0\"},\"contracts/utils/BuildCallData.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity 0.8.10;\\n\\nlibrary BuildCallData {\\n    uint8 public constant PALLET_INDEX = 125;\\n    uint8 public constant MINT_CALL_INDEX = 0;\\n    uint8 public constant SWAP_CALL_INDEX = 1;\\n    uint8 public constant REDEEM_CALL_INDEX = 2;\\n\\n    function buildMintCallBytes(\\n        address caller,\\n        bytes2 token,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(MINT_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), token, targetChain);\\n    }\\n\\n    function buildSwapCallBytes(\\n        address caller,\\n        bytes2 currency_in,\\n        bytes2 currency_in_out,\\n        uint128 currency_out_min,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(SWAP_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(\\n                prefix,\\n                abi.encodePacked(caller),\\n                currency_in,\\n                currency_in_out,\\n                encode_uint128(currency_out_min),\\n                targetChain\\n            );\\n    }\\n\\n    function buildRedeemCallBytes(\\n        address caller,\\n        bytes2 vtoken,\\n        bytes1 targetChain\\n    ) public pure returns (bytes memory) {\\n        bytes memory prefix = new bytes(2);\\n        // storage pallet index\\n        prefix[0] = bytes1(PALLET_INDEX);\\n        // storage call index\\n        prefix[1] = bytes1(REDEEM_CALL_INDEX);\\n\\n        // astar target_chain = bytes1(0)\\n        return\\n            bytes.concat(prefix, abi.encodePacked(caller), vtoken, targetChain);\\n    }\\n\\n    //https://docs.substrate.io/reference/scale-codec/\\n    function encode_uint128(uint128 x) internal pure returns (bytes memory) {\\n        bytes memory b = new bytes(16);\\n        for (uint i = 0; i < 16; i++) {\\n            b[i] = bytes1(uint8(x / (2 ** (8 * i))));\\n        }\\n        return b;\\n    }\\n}\\n\",\"keccak256\":\"0x08da4ea2ae0ed8b9409e441599f97c9b77ce6ce42029a0331ace24c21de74231\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c80638a6fa437116100ec578063de4f4f1e1161008a578063ef70a06711610064578063ef70a0671461049f578063f163112a146104bf578063f2fde38b146104df578063f342f518146104ff57600080fd5b8063de4f4f1e1461044e578063dfccfc3114610464578063e284db661461048c57600080fd5b8063a1814914116100c6578063a1814914146103b4578063a75d80ff146103d4578063b2a115051461040e578063d45aa53b1461042e57600080fd5b80638a6fa437146103615780638da5cb5b146103765780639097c25d1461039457600080fd5b806366ab963311610159578063715018a611610133578063715018a6146102f357806380f784a8146103085780638456cb59146103215780638831d6181461033657600080fd5b806366ab9633146102ab5780636deea29c146102cb5780636ef67f7f146102eb57600080fd5b80630664916a146101a15780631aa51037146101d8578063261fb596146102135780633c75045e146102415780633f4ba83a146102715780635c975abb14610288575b600080fd5b3480156101ad57600080fd5b506101ba61080360f01b81565b6040516001600160f01b031990911681526020015b60405180910390f35b3480156101e457600080fd5b506102056101f3366004611972565b609a6020526000908152604090205481565b6040519081526020016101cf565b34801561021f57600080fd5b5061022961500481565b6040516001600160a01b0390911681526020016101cf565b34801561024d57600080fd5b506101ba61025c366004611972565b60996020526000908152604090205460f01b81565b34801561027d57600080fd5b5061028661052d565b005b34801561029457600080fd5b5060655460ff1660405190151581526020016101cf565b3480156102b757600080fd5b506102866102c6366004611994565b61053f565b3480156102d757600080fd5b506102866102e63660046119d1565b610629565b610286610805565b3480156102ff57600080fd5b5061028661097b565b34801561031457600080fd5b506101ba61090360f01b81565b34801561032d57600080fd5b5061028661098d565b34801561034257600080fd5b5061034c6107ee81565b60405163ffffffff90911681526020016101cf565b34801561036d57600080fd5b50610229600081565b34801561038257600080fd5b506033546001600160a01b0316610229565b3480156103a057600080fd5b506102866103af366004611a12565b61099d565b3480156103c057600080fd5b506102866103cf3660046119d1565b610ba9565b3480156103e057600080fd5b506098546103f59067ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016101cf565b34801561041a57600080fd5b50610286610429366004611a5f565b610bcd565b34801561043a57600080fd5b50610286610449366004611994565b610db5565b34801561045a57600080fd5b5061020560975481565b34801561047057600080fd5b5061022973ffffffff0000000000000001000000000000000281565b61028661049a366004611a9b565b610eda565b3480156104ab57600080fd5b506102866104ba3660046119d1565b6110b3565b3480156104cb57600080fd5b506102866104da366004611ace565b6110e9565b3480156104eb57600080fd5b506102866104fa366004611972565b61116c565b34801561050b57600080fd5b50610514600081565b6040516001600160f81b031990911681526020016101cf565b6105356111e5565b61053d61123f565b565b6105476111e5565b64e8d4a510008211156105a15760405162461bcd60e51b815260206004820152601960248201527f5472616e73616374696f6e2046656520746f6f206c617267650000000000000060448201526064015b60405180910390fd5b6402540be4008167ffffffffffffffff1611156106005760405162461bcd60e51b815260206004820152601860248201527f5472616e7361637457656967687420746f6f206c6172676500000000000000006044820152606401610598565b6097919091556098805467ffffffffffffffff191667ffffffffffffffff909216919091179055565b610631611291565b6001600160a01b03821660009081526099602052604090205460f01b6001600160f01b0319811661090360f01b146106995760405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd5c1c1bdc9d60aa1b6044820152606401610598565b6106a383836112d7565b60405163139bc42560e31b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90639cde2128906106e190339086908690600401611b07565b600060405180830381865af41580156106fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107269190810190611b82565b609754609854604051637c87590960e11b81529293506150049263f90eb2129261077e926107ee9260009273ffffffff00000000000000010000000000000002929091899167ffffffffffffffff1690600401611c5b565b6020604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c19190611cb3565b507f08289580fadd4da935641e6814bb9b5e9fc4cccdedcff6d35124fcb578695745338585846040516107f79493929190611cd5565b60405180910390a150505050565b61080d611291565b610816346115ac565b60405163d9bee3b360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__9063d9bee3b39061085990339061080360f01b908690600401611b07565b600060405180830381865af4158015610876573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089e9190810190611b82565b609754609854604051637c87590960e11b81529293506150049263f90eb212926108f6926107ee9260009273ffffffff00000000000000010000000000000002929091899167ffffffffffffffff1690600401611c5b565b6020604051808303816000875af1158015610915573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109399190611cb3565b507f30c99b8e9449992bd7616d2645b02ee0a2b6f229a45d6b56b686963ff0c5349733600034846040516109709493929190611cd5565b60405180910390a150565b6109836111e5565b61053d60006117bd565b6109956111e5565b61053d61180f565b6109a5611291565b6001600160a01b0380851660009081526099602052604080822054928616825290205460f091821b911b6001600160f01b03198216158015906109f157506001600160f01b0319811615155b610a325760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610598565b610a3c86856112d7565b604051630daf27e360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90630daf27e390610a7e903390879087908a908890600401611d12565b600060405180830381865af4158015610a9b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610ac39190810190611b82565b609754609854604051637c87590960e11b81529293506150049263f90eb21292610b1b926107ee9260009273ffffffff00000000000000010000000000000002929091899167ffffffffffffffff1690600401611c5b565b6020604051808303816000875af1158015610b3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b5e9190611cb3565b507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e5664607015338888888886604051610b9896959493929190611d5f565b60405180910390a150505050505050565b610bb16111e5565b6001600160a01b039091166000908152609a6020526040902055565b610bd5611291565b6001600160a01b03831660009081526099602052604090205460f01b6001600160f01b03198116610c3a5760405162461bcd60e51b815260206004820152600f60248201526e24b73b30b634b21030b9b9b2ba24b760891b6044820152606401610598565b610c4484846112d7565b604051630daf27e360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90630daf27e390610c8b903390869061080360f01b9089908890600401611d12565b600060405180830381865af4158015610ca8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610cd09190810190611b82565b609754609854604051637c87590960e11b81529293506150049263f90eb21292610d28926107ee9260009273ffffffff00000000000000010000000000000002929091899167ffffffffffffffff1690600401611c5b565b6020604051808303816000875af1158015610d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d6b9190611cb3565b507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e566460701533866000878786604051610da696959493929190611d5f565b60405180910390a15050505050565b600054610100900460ff1615808015610dd55750600054600160ff909116105b80610def5750303b158015610def575060005460ff166001145b610e525760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610598565b6000805460ff191660011790558015610e75576000805461ff0019166101001790555b610e7d61184c565b610e8561187b565b610e8f838361053f565b8015610ed5576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b610ee2611291565b6001600160a01b03821660009081526099602052604090205460f01b6001600160f01b03198116610f485760405162461bcd60e51b815260206004820152601060248201526f125b9d985b1a5908185cdcd95d13dd5d60821b6044820152606401610598565b610f51346115ac565b604051630daf27e360e01b815260009073__$e184f4046250cd750dfdb139628ab13bdc$__90630daf27e390610f9890339061080360f01b90879089908890600401611d12565b600060405180830381865af4158015610fb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610fdd9190810190611b82565b609754609854604051637c87590960e11b81529293506150049263f90eb21292611035926107ee9260009273ffffffff00000000000000010000000000000002929091899167ffffffffffffffff1690600401611c5b565b6020604051808303816000875af1158015611054573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110789190611cb3565b507f9138260f61fa33975c7836d8bc3bd6a90f1af883710740bbf6341e5664607015336000863487866040516107f796959493929190611d5f565b60405162461bcd60e51b815260206004820152600b60248201526a139bdd081cdd5c1c1bdc9d60aa1b6044820152606401610598565b6110f16111e5565b6001600160f01b0319811661113d5760405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818dd5c9c995b98de525960721b6044820152606401610598565b6001600160a01b03919091166000908152609960205260409020805461ffff191660f09290921c919091179055565b6111746111e5565b6001600160a01b0381166111d95760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610598565b6111e2816117bd565b50565b6033546001600160a01b0316331461053d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610598565b6112476118aa565b6065805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b60655460ff161561053d5760405162461bcd60e51b815260206004820152601060248201526f14185d5cd8589b194e881c185d5cd95960821b6044820152606401610598565b6001600160a01b0382166113245760405162461bcd60e51b8152602060048201526014602482015273496e76616c69642061737365744164647265737360601b6044820152606401610598565b6001600160a01b0382166000908152609a60205260409020548110156113855760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610598565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af41580156113e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140a9190611db5565b60408051600180825281830190925291925060009190602080830190803683375050604080516001808252818301909252929350600092915060208083019080368337019050509050846001600160a01b0381166323b872dd336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152306024820152604481018890526064016020604051808303816000875af11580156114b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114db9190611cb3565b5085836000815181106114f0576114f0611dce565b60200260200101906001600160a01b031690816001600160a01b031681525050848260008151811061152457611524611dce565b60209081029190910101526040516219054d60e41b81526150049063019054d090611560908690869089906000906107ee908290600401611de4565b6020604051808303816000875af115801561157f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115a39190611cb3565b50505050505050565b60008052609a6020527fbe6620bd3346e5d7f8387fbec0981aa0d6289d22efa7c935f9ef6841bf2a98c75481101561161f5760405162461bcd60e51b81526020600482015260166024820152754c657373207468616e204d696e696d756d56616c756560501b6044820152606401610598565b600073__$ddfb0e6c1c4d05795fcce73a90830b0995$__6332640a52336040516001600160e01b031960e084901b1681526001600160a01b039091166004820152602401602060405180830381865af4158015611680573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116a49190611db5565b6040805160018082528183019092529192506000919060208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050905060008260008151811061170257611702611dce565b60200260200101906001600160a01b031690816001600160a01b031681525050838160008151811061173657611736611dce565b602090810291909101015260405163400c0e8d60e01b81526150049063400c0e8d90611773908590859088906000906107ee908290600401611de4565b6020604051808303816000875af1158015611792573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117b69190611cb3565b5050505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b611817611291565b6065805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586112743390565b600054610100900460ff166118735760405162461bcd60e51b815260040161059890611e90565b61053d6118f3565b600054610100900460ff166118a25760405162461bcd60e51b815260040161059890611e90565b61053d611923565b60655460ff1661053d5760405162461bcd60e51b815260206004820152601460248201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b6044820152606401610598565b600054610100900460ff1661191a5760405162461bcd60e51b815260040161059890611e90565b61053d336117bd565b600054610100900460ff1661194a5760405162461bcd60e51b815260040161059890611e90565b6065805460ff19169055565b80356001600160a01b038116811461196d57600080fd5b919050565b60006020828403121561198457600080fd5b61198d82611956565b9392505050565b600080604083850312156119a757600080fd5b82359150602083013567ffffffffffffffff811681146119c657600080fd5b809150509250929050565b600080604083850312156119e457600080fd5b6119ed83611956565b946020939093013593505050565b80356001600160801b038116811461196d57600080fd5b60008060008060808587031215611a2857600080fd5b611a3185611956565b9350611a3f60208601611956565b925060408501359150611a54606086016119fb565b905092959194509250565b600080600060608486031215611a7457600080fd5b611a7d84611956565b925060208401359150611a92604085016119fb565b90509250925092565b60008060408385031215611aae57600080fd5b611ab783611956565b9150611ac5602084016119fb565b90509250929050565b60008060408385031215611ae157600080fd5b611aea83611956565b915060208301356001600160f01b0319811681146119c657600080fd5b6001600160a01b039390931683526001600160f01b03199190911660208301526001600160f81b031916604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015611b6d578181015183820152602001611b55565b83811115611b7c576000848401525b50505050565b600060208284031215611b9457600080fd5b815167ffffffffffffffff80821115611bac57600080fd5b818401915084601f830112611bc057600080fd5b815181811115611bd257611bd2611b3c565b604051601f8201601f19908116603f01168101908382118183101715611bfa57611bfa611b3c565b81604052828152876020848701011115611c1357600080fd5b611c24836020830160208801611b52565b979650505050505050565b60008151808452611c47816020860160208601611b52565b601f01601f19169290920160200192915050565b63ffffffff87168152851515602082015260018060a01b038516604082015283606082015260c060808201526000611c9660c0830185611c2f565b905067ffffffffffffffff831660a0830152979650505050505050565b600060208284031215611cc557600080fd5b8151801515811461198d57600080fd5b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090611d0890830184611c2f565b9695505050505050565b6001600160a01b039590951685526001600160f01b031993841660208601529190921660408401526001600160801b0390911660608301526001600160f81b031916608082015260a00190565b6001600160a01b038781168252868116602083015285166040820152606081018490526001600160801b038316608082015260c060a08201819052600090611da990830184611c2f565b98975050505050505050565b600060208284031215611dc757600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b60c0808252875190820181905260009060209060e0840190828b01845b82811015611e265781516001600160a01b031684529284019290840190600101611e01565b5050508381038285015288518082528983019183019060005b81811015611e5b57835183529284019291840191600101611e3f565b50506040850189905287151560608601529250611e76915050565b63ffffffff93909316608082015260a00152949350505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b60608201526080019056fea26469706673582212208f2bf97ba63737ee46d92cab598a921e5d21ceafeddfa2336d677e76798bdfee64736f6c634300080a0033",
  "libraries": {
    "AddressToAccount": "0xb6F2B9415fc599130084b7F20B84738aCBB15930",
    "BuildCallData": "0x598efcBD0B5b4Fd0142bEAae1a38f6Bd4d8a218d"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "mintVNativeAsset()": {
        "notice": "Minted vNative assets such as vASTR, vGLMR, vMOVR"
      },
      "redeemAsset(address,uint256)": {
        "notice": "Redeem assets"
      },
      "swapAssetsForExactAssets(address,address,uint256,uint128)": {
        "notice": "Swap one asset for another"
      },
      "swapAssetsForExactNativeAssets(address,uint256,uint128)": {
        "notice": "Swap one asset for native asset"
      },
      "swapNativeAssetsForExactAssets(address,uint128)": {
        "notice": "Swap native asset for another"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 798,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 130,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 321,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "_paused",
        "offset": 0,
        "slot": "101",
        "type": "t_bool"
      },
      {
        "astId": 426,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 915,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "bifrostTransactionFee",
        "offset": 0,
        "slot": "151",
        "type": "t_uint256"
      },
      {
        "astId": 917,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "transactWeight",
        "offset": 0,
        "slot": "152",
        "type": "t_uint64"
      },
      {
        "astId": 921,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "assetAddressToCurrencyId",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_bytes2)"
      },
      {
        "astId": 925,
        "contract": "contracts/AstarSlpx.sol:AstarSlpx",
        "label": "assetAddressToMinimumValue",
        "offset": 0,
        "slot": "154",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes2": {
        "encoding": "inplace",
        "label": "bytes2",
        "numberOfBytes": "2"
      },
      "t_mapping(t_address,t_bytes2)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bytes2)",
        "numberOfBytes": "32",
        "value": "t_bytes2"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}